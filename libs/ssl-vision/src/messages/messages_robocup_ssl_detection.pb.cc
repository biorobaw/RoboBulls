// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_robocup_ssl_detection.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "libs/ssl-vision/include/messages/messages_robocup_ssl_detection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* SSL_DetectionBall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSL_DetectionBall_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSL_DetectionRobot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSL_DetectionRobot_reflection_ = NULL;
const ::google::protobuf::Descriptor* SSL_DetectionFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SSL_DetectionFrame_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_5frobocup_5fssl_5fdetection_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_messages_5frobocup_5fssl_5fdetection_2eproto() {
  protobuf_AddDesc_messages_5frobocup_5fssl_5fdetection_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages_robocup_ssl_detection.proto");
  GOOGLE_CHECK(file != NULL);
  SSL_DetectionBall_descriptor_ = file->message_type(0);
  static const int SSL_DetectionBall_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionBall, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionBall, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionBall, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionBall, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionBall, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionBall, pixel_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionBall, pixel_y_),
  };
  SSL_DetectionBall_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SSL_DetectionBall_descriptor_,
      SSL_DetectionBall::default_instance_,
      SSL_DetectionBall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionBall, _has_bits_[0]),
      -1,
      -1,
      sizeof(SSL_DetectionBall),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionBall, _internal_metadata_),
      -1);
  SSL_DetectionRobot_descriptor_ = file->message_type(1);
  static const int SSL_DetectionRobot_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionRobot, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionRobot, robot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionRobot, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionRobot, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionRobot, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionRobot, pixel_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionRobot, pixel_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionRobot, height_),
  };
  SSL_DetectionRobot_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SSL_DetectionRobot_descriptor_,
      SSL_DetectionRobot::default_instance_,
      SSL_DetectionRobot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionRobot, _has_bits_[0]),
      -1,
      -1,
      sizeof(SSL_DetectionRobot),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionRobot, _internal_metadata_),
      -1);
  SSL_DetectionFrame_descriptor_ = file->message_type(2);
  static const int SSL_DetectionFrame_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionFrame, frame_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionFrame, t_capture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionFrame, t_sent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionFrame, camera_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionFrame, balls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionFrame, robots_yellow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionFrame, robots_blue_),
  };
  SSL_DetectionFrame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SSL_DetectionFrame_descriptor_,
      SSL_DetectionFrame::default_instance_,
      SSL_DetectionFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionFrame, _has_bits_[0]),
      -1,
      -1,
      sizeof(SSL_DetectionFrame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_DetectionFrame, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_5frobocup_5fssl_5fdetection_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SSL_DetectionBall_descriptor_, &SSL_DetectionBall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SSL_DetectionRobot_descriptor_, &SSL_DetectionRobot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SSL_DetectionFrame_descriptor_, &SSL_DetectionFrame::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_5frobocup_5fssl_5fdetection_2eproto() {
  delete SSL_DetectionBall::default_instance_;
  delete SSL_DetectionBall_reflection_;
  delete SSL_DetectionRobot::default_instance_;
  delete SSL_DetectionRobot_reflection_;
  delete SSL_DetectionFrame::default_instance_;
  delete SSL_DetectionFrame_reflection_;
}

void protobuf_AddDesc_messages_5frobocup_5fssl_5fdetection_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_messages_5frobocup_5fssl_5fdetection_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n$messages_robocup_ssl_detection.proto\"x"
    "\n\021SSL_DetectionBall\022\022\n\nconfidence\030\001 \002(\002\022"
    "\014\n\004area\030\002 \001(\r\022\t\n\001x\030\003 \002(\002\022\t\n\001y\030\004 \002(\002\022\t\n\001z"
    "\030\005 \001(\002\022\017\n\007pixel_x\030\006 \002(\002\022\017\n\007pixel_y\030\007 \002(\002"
    "\"\227\001\n\022SSL_DetectionRobot\022\022\n\nconfidence\030\001 "
    "\002(\002\022\020\n\010robot_id\030\002 \001(\r\022\t\n\001x\030\003 \002(\002\022\t\n\001y\030\004 "
    "\002(\002\022\023\n\013orientation\030\005 \001(\002\022\017\n\007pixel_x\030\006 \002("
    "\002\022\017\n\007pixel_y\030\007 \002(\002\022\016\n\006height\030\010 \001(\002\"\331\001\n\022S"
    "SL_DetectionFrame\022\024\n\014frame_number\030\001 \002(\r\022"
    "\021\n\tt_capture\030\002 \002(\001\022\016\n\006t_sent\030\003 \002(\001\022\021\n\tca"
    "mera_id\030\004 \002(\r\022!\n\005balls\030\005 \003(\0132\022.SSL_Detec"
    "tionBall\022*\n\rrobots_yellow\030\006 \003(\0132\023.SSL_De"
    "tectionRobot\022(\n\013robots_blue\030\007 \003(\0132\023.SSL_"
    "DetectionRobot", 534);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages_robocup_ssl_detection.proto", &protobuf_RegisterTypes);
  SSL_DetectionBall::default_instance_ = new SSL_DetectionBall();
  SSL_DetectionRobot::default_instance_ = new SSL_DetectionRobot();
  SSL_DetectionFrame::default_instance_ = new SSL_DetectionFrame();
  SSL_DetectionBall::default_instance_->InitAsDefaultInstance();
  SSL_DetectionRobot::default_instance_->InitAsDefaultInstance();
  SSL_DetectionFrame::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_5frobocup_5fssl_5fdetection_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_5frobocup_5fssl_5fdetection_2eproto {
  StaticDescriptorInitializer_messages_5frobocup_5fssl_5fdetection_2eproto() {
    protobuf_AddDesc_messages_5frobocup_5fssl_5fdetection_2eproto();
  }
} static_descriptor_initializer_messages_5frobocup_5fssl_5fdetection_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_DetectionBall::kConfidenceFieldNumber;
const int SSL_DetectionBall::kAreaFieldNumber;
const int SSL_DetectionBall::kXFieldNumber;
const int SSL_DetectionBall::kYFieldNumber;
const int SSL_DetectionBall::kZFieldNumber;
const int SSL_DetectionBall::kPixelXFieldNumber;
const int SSL_DetectionBall::kPixelYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_DetectionBall::SSL_DetectionBall()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_DetectionBall)
}

void SSL_DetectionBall::InitAsDefaultInstance() {
}

SSL_DetectionBall::SSL_DetectionBall(const SSL_DetectionBall& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSL_DetectionBall)
}

void SSL_DetectionBall::SharedCtor() {
  _cached_size_ = 0;
  confidence_ = 0;
  area_ = 0u;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  pixel_x_ = 0;
  pixel_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSL_DetectionBall::~SSL_DetectionBall() {
  // @@protoc_insertion_point(destructor:SSL_DetectionBall)
  SharedDtor();
}

void SSL_DetectionBall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SSL_DetectionBall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSL_DetectionBall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSL_DetectionBall_descriptor_;
}

const SSL_DetectionBall& SSL_DetectionBall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_5frobocup_5fssl_5fdetection_2eproto();
  return *default_instance_;
}

SSL_DetectionBall* SSL_DetectionBall::default_instance_ = NULL;

SSL_DetectionBall* SSL_DetectionBall::New(::google::protobuf::Arena* arena) const {
  SSL_DetectionBall* n = new SSL_DetectionBall;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSL_DetectionBall::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_DetectionBall)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SSL_DetectionBall, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SSL_DetectionBall*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(confidence_, pixel_y_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SSL_DetectionBall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_DetectionBall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float confidence = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
          set_has_confidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_area;
        break;
      }

      // optional uint32 area = 2;
      case 2: {
        if (tag == 16) {
         parse_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_)));
          set_has_area();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_x;
        break;
      }

      // required float x = 3;
      case 3: {
        if (tag == 29) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_y;
        break;
      }

      // required float y = 4;
      case 4: {
        if (tag == 37) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_z;
        break;
      }

      // optional float z = 5;
      case 5: {
        if (tag == 45) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_pixel_x;
        break;
      }

      // required float pixel_x = 6;
      case 6: {
        if (tag == 53) {
         parse_pixel_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pixel_x_)));
          set_has_pixel_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_pixel_y;
        break;
      }

      // required float pixel_y = 7;
      case 7: {
        if (tag == 61) {
         parse_pixel_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pixel_y_)));
          set_has_pixel_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_DetectionBall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_DetectionBall)
  return false;
#undef DO_
}

void SSL_DetectionBall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_DetectionBall)
  // required float confidence = 1;
  if (has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->confidence(), output);
  }

  // optional uint32 area = 2;
  if (has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->area(), output);
  }

  // required float x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // required float y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  // optional float z = 5;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->z(), output);
  }

  // required float pixel_x = 6;
  if (has_pixel_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->pixel_x(), output);
  }

  // required float pixel_y = 7;
  if (has_pixel_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->pixel_y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSL_DetectionBall)
}

::google::protobuf::uint8* SSL_DetectionBall::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_DetectionBall)
  // required float confidence = 1;
  if (has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->confidence(), target);
  }

  // optional uint32 area = 2;
  if (has_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->area(), target);
  }

  // required float x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // required float y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }

  // optional float z = 5;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->z(), target);
  }

  // required float pixel_x = 6;
  if (has_pixel_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->pixel_x(), target);
  }

  // required float pixel_y = 7;
  if (has_pixel_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->pixel_y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_DetectionBall)
  return target;
}

int SSL_DetectionBall::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_DetectionBall)
  int total_size = 0;

  if (has_confidence()) {
    // required float confidence = 1;
    total_size += 1 + 4;
  }

  if (has_x()) {
    // required float x = 3;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 4;
    total_size += 1 + 4;
  }

  if (has_pixel_x()) {
    // required float pixel_x = 6;
    total_size += 1 + 4;
  }

  if (has_pixel_y()) {
    // required float pixel_y = 7;
    total_size += 1 + 4;
  }

  return total_size;
}
int SSL_DetectionBall::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_DetectionBall)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000006d) ^ 0x0000006d) == 0) {  // All required fields are present.
    // required float confidence = 1;
    total_size += 1 + 4;

    // required float x = 3;
    total_size += 1 + 4;

    // required float y = 4;
    total_size += 1 + 4;

    // required float pixel_x = 6;
    total_size += 1 + 4;

    // required float pixel_y = 7;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[1 / 32] & 18u) {
    // optional uint32 area = 2;
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area());
    }

    // optional float z = 5;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSL_DetectionBall::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_DetectionBall)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SSL_DetectionBall* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_DetectionBall>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_DetectionBall)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_DetectionBall)
    MergeFrom(*source);
  }
}

void SSL_DetectionBall::MergeFrom(const SSL_DetectionBall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_DetectionBall)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confidence()) {
      set_confidence(from.confidence());
    }
    if (from.has_area()) {
      set_area(from.area());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_pixel_x()) {
      set_pixel_x(from.pixel_x());
    }
    if (from.has_pixel_y()) {
      set_pixel_y(from.pixel_y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SSL_DetectionBall::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_DetectionBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_DetectionBall::CopyFrom(const SSL_DetectionBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_DetectionBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_DetectionBall::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000006d) != 0x0000006d) return false;

  return true;
}

void SSL_DetectionBall::Swap(SSL_DetectionBall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_DetectionBall::InternalSwap(SSL_DetectionBall* other) {
  std::swap(confidence_, other->confidence_);
  std::swap(area_, other->area_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(pixel_x_, other->pixel_x_);
  std::swap(pixel_y_, other->pixel_y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSL_DetectionBall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSL_DetectionBall_descriptor_;
  metadata.reflection = SSL_DetectionBall_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SSL_DetectionBall

// required float confidence = 1;
bool SSL_DetectionBall::has_confidence() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SSL_DetectionBall::set_has_confidence() {
  _has_bits_[0] |= 0x00000001u;
}
void SSL_DetectionBall::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000001u;
}
void SSL_DetectionBall::clear_confidence() {
  confidence_ = 0;
  clear_has_confidence();
}
 float SSL_DetectionBall::confidence() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionBall.confidence)
  return confidence_;
}
 void SSL_DetectionBall::set_confidence(float value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionBall.confidence)
}

// optional uint32 area = 2;
bool SSL_DetectionBall::has_area() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SSL_DetectionBall::set_has_area() {
  _has_bits_[0] |= 0x00000002u;
}
void SSL_DetectionBall::clear_has_area() {
  _has_bits_[0] &= ~0x00000002u;
}
void SSL_DetectionBall::clear_area() {
  area_ = 0u;
  clear_has_area();
}
 ::google::protobuf::uint32 SSL_DetectionBall::area() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionBall.area)
  return area_;
}
 void SSL_DetectionBall::set_area(::google::protobuf::uint32 value) {
  set_has_area();
  area_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionBall.area)
}

// required float x = 3;
bool SSL_DetectionBall::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SSL_DetectionBall::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
void SSL_DetectionBall::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
void SSL_DetectionBall::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float SSL_DetectionBall::x() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionBall.x)
  return x_;
}
 void SSL_DetectionBall::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionBall.x)
}

// required float y = 4;
bool SSL_DetectionBall::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SSL_DetectionBall::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
void SSL_DetectionBall::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
void SSL_DetectionBall::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float SSL_DetectionBall::y() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionBall.y)
  return y_;
}
 void SSL_DetectionBall::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionBall.y)
}

// optional float z = 5;
bool SSL_DetectionBall::has_z() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SSL_DetectionBall::set_has_z() {
  _has_bits_[0] |= 0x00000010u;
}
void SSL_DetectionBall::clear_has_z() {
  _has_bits_[0] &= ~0x00000010u;
}
void SSL_DetectionBall::clear_z() {
  z_ = 0;
  clear_has_z();
}
 float SSL_DetectionBall::z() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionBall.z)
  return z_;
}
 void SSL_DetectionBall::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionBall.z)
}

// required float pixel_x = 6;
bool SSL_DetectionBall::has_pixel_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SSL_DetectionBall::set_has_pixel_x() {
  _has_bits_[0] |= 0x00000020u;
}
void SSL_DetectionBall::clear_has_pixel_x() {
  _has_bits_[0] &= ~0x00000020u;
}
void SSL_DetectionBall::clear_pixel_x() {
  pixel_x_ = 0;
  clear_has_pixel_x();
}
 float SSL_DetectionBall::pixel_x() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionBall.pixel_x)
  return pixel_x_;
}
 void SSL_DetectionBall::set_pixel_x(float value) {
  set_has_pixel_x();
  pixel_x_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionBall.pixel_x)
}

// required float pixel_y = 7;
bool SSL_DetectionBall::has_pixel_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SSL_DetectionBall::set_has_pixel_y() {
  _has_bits_[0] |= 0x00000040u;
}
void SSL_DetectionBall::clear_has_pixel_y() {
  _has_bits_[0] &= ~0x00000040u;
}
void SSL_DetectionBall::clear_pixel_y() {
  pixel_y_ = 0;
  clear_has_pixel_y();
}
 float SSL_DetectionBall::pixel_y() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionBall.pixel_y)
  return pixel_y_;
}
 void SSL_DetectionBall::set_pixel_y(float value) {
  set_has_pixel_y();
  pixel_y_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionBall.pixel_y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_DetectionRobot::kConfidenceFieldNumber;
const int SSL_DetectionRobot::kRobotIdFieldNumber;
const int SSL_DetectionRobot::kXFieldNumber;
const int SSL_DetectionRobot::kYFieldNumber;
const int SSL_DetectionRobot::kOrientationFieldNumber;
const int SSL_DetectionRobot::kPixelXFieldNumber;
const int SSL_DetectionRobot::kPixelYFieldNumber;
const int SSL_DetectionRobot::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_DetectionRobot::SSL_DetectionRobot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_DetectionRobot)
}

void SSL_DetectionRobot::InitAsDefaultInstance() {
}

SSL_DetectionRobot::SSL_DetectionRobot(const SSL_DetectionRobot& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSL_DetectionRobot)
}

void SSL_DetectionRobot::SharedCtor() {
  _cached_size_ = 0;
  confidence_ = 0;
  robot_id_ = 0u;
  x_ = 0;
  y_ = 0;
  orientation_ = 0;
  pixel_x_ = 0;
  pixel_y_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSL_DetectionRobot::~SSL_DetectionRobot() {
  // @@protoc_insertion_point(destructor:SSL_DetectionRobot)
  SharedDtor();
}

void SSL_DetectionRobot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SSL_DetectionRobot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSL_DetectionRobot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSL_DetectionRobot_descriptor_;
}

const SSL_DetectionRobot& SSL_DetectionRobot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_5frobocup_5fssl_5fdetection_2eproto();
  return *default_instance_;
}

SSL_DetectionRobot* SSL_DetectionRobot::default_instance_ = NULL;

SSL_DetectionRobot* SSL_DetectionRobot::New(::google::protobuf::Arena* arena) const {
  SSL_DetectionRobot* n = new SSL_DetectionRobot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSL_DetectionRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_DetectionRobot)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SSL_DetectionRobot, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SSL_DetectionRobot*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(confidence_, height_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SSL_DetectionRobot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_DetectionRobot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float confidence = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
          set_has_confidence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_robot_id;
        break;
      }

      // optional uint32 robot_id = 2;
      case 2: {
        if (tag == 16) {
         parse_robot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robot_id_)));
          set_has_robot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_x;
        break;
      }

      // required float x = 3;
      case 3: {
        if (tag == 29) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_y;
        break;
      }

      // required float y = 4;
      case 4: {
        if (tag == 37) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_orientation;
        break;
      }

      // optional float orientation = 5;
      case 5: {
        if (tag == 45) {
         parse_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &orientation_)));
          set_has_orientation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_pixel_x;
        break;
      }

      // required float pixel_x = 6;
      case 6: {
        if (tag == 53) {
         parse_pixel_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pixel_x_)));
          set_has_pixel_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_pixel_y;
        break;
      }

      // required float pixel_y = 7;
      case 7: {
        if (tag == 61) {
         parse_pixel_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pixel_y_)));
          set_has_pixel_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_height;
        break;
      }

      // optional float height = 8;
      case 8: {
        if (tag == 69) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_DetectionRobot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_DetectionRobot)
  return false;
#undef DO_
}

void SSL_DetectionRobot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_DetectionRobot)
  // required float confidence = 1;
  if (has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->confidence(), output);
  }

  // optional uint32 robot_id = 2;
  if (has_robot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->robot_id(), output);
  }

  // required float x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // required float y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  // optional float orientation = 5;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->orientation(), output);
  }

  // required float pixel_x = 6;
  if (has_pixel_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->pixel_x(), output);
  }

  // required float pixel_y = 7;
  if (has_pixel_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->pixel_y(), output);
  }

  // optional float height = 8;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSL_DetectionRobot)
}

::google::protobuf::uint8* SSL_DetectionRobot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_DetectionRobot)
  // required float confidence = 1;
  if (has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->confidence(), target);
  }

  // optional uint32 robot_id = 2;
  if (has_robot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->robot_id(), target);
  }

  // required float x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // required float y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }

  // optional float orientation = 5;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->orientation(), target);
  }

  // required float pixel_x = 6;
  if (has_pixel_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->pixel_x(), target);
  }

  // required float pixel_y = 7;
  if (has_pixel_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->pixel_y(), target);
  }

  // optional float height = 8;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_DetectionRobot)
  return target;
}

int SSL_DetectionRobot::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_DetectionRobot)
  int total_size = 0;

  if (has_confidence()) {
    // required float confidence = 1;
    total_size += 1 + 4;
  }

  if (has_x()) {
    // required float x = 3;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 4;
    total_size += 1 + 4;
  }

  if (has_pixel_x()) {
    // required float pixel_x = 6;
    total_size += 1 + 4;
  }

  if (has_pixel_y()) {
    // required float pixel_y = 7;
    total_size += 1 + 4;
  }

  return total_size;
}
int SSL_DetectionRobot::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_DetectionRobot)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000006d) ^ 0x0000006d) == 0) {  // All required fields are present.
    // required float confidence = 1;
    total_size += 1 + 4;

    // required float x = 3;
    total_size += 1 + 4;

    // required float y = 4;
    total_size += 1 + 4;

    // required float pixel_x = 6;
    total_size += 1 + 4;

    // required float pixel_y = 7;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[1 / 32] & 146u) {
    // optional uint32 robot_id = 2;
    if (has_robot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->robot_id());
    }

    // optional float orientation = 5;
    if (has_orientation()) {
      total_size += 1 + 4;
    }

    // optional float height = 8;
    if (has_height()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSL_DetectionRobot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_DetectionRobot)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SSL_DetectionRobot* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_DetectionRobot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_DetectionRobot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_DetectionRobot)
    MergeFrom(*source);
  }
}

void SSL_DetectionRobot::MergeFrom(const SSL_DetectionRobot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_DetectionRobot)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_confidence()) {
      set_confidence(from.confidence());
    }
    if (from.has_robot_id()) {
      set_robot_id(from.robot_id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_orientation()) {
      set_orientation(from.orientation());
    }
    if (from.has_pixel_x()) {
      set_pixel_x(from.pixel_x());
    }
    if (from.has_pixel_y()) {
      set_pixel_y(from.pixel_y());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SSL_DetectionRobot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_DetectionRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_DetectionRobot::CopyFrom(const SSL_DetectionRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_DetectionRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_DetectionRobot::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000006d) != 0x0000006d) return false;

  return true;
}

void SSL_DetectionRobot::Swap(SSL_DetectionRobot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_DetectionRobot::InternalSwap(SSL_DetectionRobot* other) {
  std::swap(confidence_, other->confidence_);
  std::swap(robot_id_, other->robot_id_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(orientation_, other->orientation_);
  std::swap(pixel_x_, other->pixel_x_);
  std::swap(pixel_y_, other->pixel_y_);
  std::swap(height_, other->height_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSL_DetectionRobot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSL_DetectionRobot_descriptor_;
  metadata.reflection = SSL_DetectionRobot_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SSL_DetectionRobot

// required float confidence = 1;
bool SSL_DetectionRobot::has_confidence() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SSL_DetectionRobot::set_has_confidence() {
  _has_bits_[0] |= 0x00000001u;
}
void SSL_DetectionRobot::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000001u;
}
void SSL_DetectionRobot::clear_confidence() {
  confidence_ = 0;
  clear_has_confidence();
}
 float SSL_DetectionRobot::confidence() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.confidence)
  return confidence_;
}
 void SSL_DetectionRobot::set_confidence(float value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.confidence)
}

// optional uint32 robot_id = 2;
bool SSL_DetectionRobot::has_robot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SSL_DetectionRobot::set_has_robot_id() {
  _has_bits_[0] |= 0x00000002u;
}
void SSL_DetectionRobot::clear_has_robot_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void SSL_DetectionRobot::clear_robot_id() {
  robot_id_ = 0u;
  clear_has_robot_id();
}
 ::google::protobuf::uint32 SSL_DetectionRobot::robot_id() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.robot_id)
  return robot_id_;
}
 void SSL_DetectionRobot::set_robot_id(::google::protobuf::uint32 value) {
  set_has_robot_id();
  robot_id_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.robot_id)
}

// required float x = 3;
bool SSL_DetectionRobot::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SSL_DetectionRobot::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
void SSL_DetectionRobot::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
void SSL_DetectionRobot::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float SSL_DetectionRobot::x() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.x)
  return x_;
}
 void SSL_DetectionRobot::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.x)
}

// required float y = 4;
bool SSL_DetectionRobot::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SSL_DetectionRobot::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
void SSL_DetectionRobot::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
void SSL_DetectionRobot::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float SSL_DetectionRobot::y() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.y)
  return y_;
}
 void SSL_DetectionRobot::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.y)
}

// optional float orientation = 5;
bool SSL_DetectionRobot::has_orientation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SSL_DetectionRobot::set_has_orientation() {
  _has_bits_[0] |= 0x00000010u;
}
void SSL_DetectionRobot::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000010u;
}
void SSL_DetectionRobot::clear_orientation() {
  orientation_ = 0;
  clear_has_orientation();
}
 float SSL_DetectionRobot::orientation() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.orientation)
  return orientation_;
}
 void SSL_DetectionRobot::set_orientation(float value) {
  set_has_orientation();
  orientation_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.orientation)
}

// required float pixel_x = 6;
bool SSL_DetectionRobot::has_pixel_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SSL_DetectionRobot::set_has_pixel_x() {
  _has_bits_[0] |= 0x00000020u;
}
void SSL_DetectionRobot::clear_has_pixel_x() {
  _has_bits_[0] &= ~0x00000020u;
}
void SSL_DetectionRobot::clear_pixel_x() {
  pixel_x_ = 0;
  clear_has_pixel_x();
}
 float SSL_DetectionRobot::pixel_x() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.pixel_x)
  return pixel_x_;
}
 void SSL_DetectionRobot::set_pixel_x(float value) {
  set_has_pixel_x();
  pixel_x_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.pixel_x)
}

// required float pixel_y = 7;
bool SSL_DetectionRobot::has_pixel_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SSL_DetectionRobot::set_has_pixel_y() {
  _has_bits_[0] |= 0x00000040u;
}
void SSL_DetectionRobot::clear_has_pixel_y() {
  _has_bits_[0] &= ~0x00000040u;
}
void SSL_DetectionRobot::clear_pixel_y() {
  pixel_y_ = 0;
  clear_has_pixel_y();
}
 float SSL_DetectionRobot::pixel_y() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.pixel_y)
  return pixel_y_;
}
 void SSL_DetectionRobot::set_pixel_y(float value) {
  set_has_pixel_y();
  pixel_y_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.pixel_y)
}

// optional float height = 8;
bool SSL_DetectionRobot::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SSL_DetectionRobot::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
void SSL_DetectionRobot::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
void SSL_DetectionRobot::clear_height() {
  height_ = 0;
  clear_has_height();
}
 float SSL_DetectionRobot::height() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionRobot.height)
  return height_;
}
 void SSL_DetectionRobot::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionRobot.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_DetectionFrame::kFrameNumberFieldNumber;
const int SSL_DetectionFrame::kTCaptureFieldNumber;
const int SSL_DetectionFrame::kTSentFieldNumber;
const int SSL_DetectionFrame::kCameraIdFieldNumber;
const int SSL_DetectionFrame::kBallsFieldNumber;
const int SSL_DetectionFrame::kRobotsYellowFieldNumber;
const int SSL_DetectionFrame::kRobotsBlueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_DetectionFrame::SSL_DetectionFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_DetectionFrame)
}

void SSL_DetectionFrame::InitAsDefaultInstance() {
}

SSL_DetectionFrame::SSL_DetectionFrame(const SSL_DetectionFrame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SSL_DetectionFrame)
}

void SSL_DetectionFrame::SharedCtor() {
  _cached_size_ = 0;
  frame_number_ = 0u;
  t_capture_ = 0;
  t_sent_ = 0;
  camera_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SSL_DetectionFrame::~SSL_DetectionFrame() {
  // @@protoc_insertion_point(destructor:SSL_DetectionFrame)
  SharedDtor();
}

void SSL_DetectionFrame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SSL_DetectionFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSL_DetectionFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SSL_DetectionFrame_descriptor_;
}

const SSL_DetectionFrame& SSL_DetectionFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_5frobocup_5fssl_5fdetection_2eproto();
  return *default_instance_;
}

SSL_DetectionFrame* SSL_DetectionFrame::default_instance_ = NULL;

SSL_DetectionFrame* SSL_DetectionFrame::New(::google::protobuf::Arena* arena) const {
  SSL_DetectionFrame* n = new SSL_DetectionFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSL_DetectionFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_DetectionFrame)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SSL_DetectionFrame, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SSL_DetectionFrame*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(t_capture_, t_sent_);

#undef ZR_HELPER_
#undef ZR_

  balls_.Clear();
  robots_yellow_.Clear();
  robots_blue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SSL_DetectionFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_DetectionFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 frame_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_number_)));
          set_has_frame_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_t_capture;
        break;
      }

      // required double t_capture = 2;
      case 2: {
        if (tag == 17) {
         parse_t_capture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_capture_)));
          set_has_t_capture();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_t_sent;
        break;
      }

      // required double t_sent = 3;
      case 3: {
        if (tag == 25) {
         parse_t_sent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_sent_)));
          set_has_t_sent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_camera_id;
        break;
      }

      // required uint32 camera_id = 4;
      case 4: {
        if (tag == 32) {
         parse_camera_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camera_id_)));
          set_has_camera_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_balls;
        break;
      }

      // repeated .SSL_DetectionBall balls = 5;
      case 5: {
        if (tag == 42) {
         parse_balls:
          DO_(input->IncrementRecursionDepth());
         parse_loop_balls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_balls()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_balls;
        if (input->ExpectTag(50)) goto parse_loop_robots_yellow;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .SSL_DetectionRobot robots_yellow = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_robots_yellow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_robots_yellow()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_robots_yellow;
        if (input->ExpectTag(58)) goto parse_loop_robots_blue;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .SSL_DetectionRobot robots_blue = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_robots_blue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_robots_blue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_robots_blue;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_DetectionFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_DetectionFrame)
  return false;
#undef DO_
}

void SSL_DetectionFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_DetectionFrame)
  // required uint32 frame_number = 1;
  if (has_frame_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->frame_number(), output);
  }

  // required double t_capture = 2;
  if (has_t_capture()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->t_capture(), output);
  }

  // required double t_sent = 3;
  if (has_t_sent()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->t_sent(), output);
  }

  // required uint32 camera_id = 4;
  if (has_camera_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->camera_id(), output);
  }

  // repeated .SSL_DetectionBall balls = 5;
  for (unsigned int i = 0, n = this->balls_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->balls(i), output);
  }

  // repeated .SSL_DetectionRobot robots_yellow = 6;
  for (unsigned int i = 0, n = this->robots_yellow_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->robots_yellow(i), output);
  }

  // repeated .SSL_DetectionRobot robots_blue = 7;
  for (unsigned int i = 0, n = this->robots_blue_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->robots_blue(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSL_DetectionFrame)
}

::google::protobuf::uint8* SSL_DetectionFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SSL_DetectionFrame)
  // required uint32 frame_number = 1;
  if (has_frame_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->frame_number(), target);
  }

  // required double t_capture = 2;
  if (has_t_capture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->t_capture(), target);
  }

  // required double t_sent = 3;
  if (has_t_sent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->t_sent(), target);
  }

  // required uint32 camera_id = 4;
  if (has_camera_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->camera_id(), target);
  }

  // repeated .SSL_DetectionBall balls = 5;
  for (unsigned int i = 0, n = this->balls_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->balls(i), false, target);
  }

  // repeated .SSL_DetectionRobot robots_yellow = 6;
  for (unsigned int i = 0, n = this->robots_yellow_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->robots_yellow(i), false, target);
  }

  // repeated .SSL_DetectionRobot robots_blue = 7;
  for (unsigned int i = 0, n = this->robots_blue_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->robots_blue(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_DetectionFrame)
  return target;
}

int SSL_DetectionFrame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_DetectionFrame)
  int total_size = 0;

  if (has_frame_number()) {
    // required uint32 frame_number = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frame_number());
  }

  if (has_t_capture()) {
    // required double t_capture = 2;
    total_size += 1 + 8;
  }

  if (has_t_sent()) {
    // required double t_sent = 3;
    total_size += 1 + 8;
  }

  if (has_camera_id()) {
    // required uint32 camera_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->camera_id());
  }

  return total_size;
}
int SSL_DetectionFrame::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_DetectionFrame)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 frame_number = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->frame_number());

    // required double t_capture = 2;
    total_size += 1 + 8;

    // required double t_sent = 3;
    total_size += 1 + 8;

    // required uint32 camera_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->camera_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .SSL_DetectionBall balls = 5;
  total_size += 1 * this->balls_size();
  for (int i = 0; i < this->balls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->balls(i));
  }

  // repeated .SSL_DetectionRobot robots_yellow = 6;
  total_size += 1 * this->robots_yellow_size();
  for (int i = 0; i < this->robots_yellow_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->robots_yellow(i));
  }

  // repeated .SSL_DetectionRobot robots_blue = 7;
  total_size += 1 * this->robots_blue_size();
  for (int i = 0; i < this->robots_blue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->robots_blue(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSL_DetectionFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_DetectionFrame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SSL_DetectionFrame* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_DetectionFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_DetectionFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_DetectionFrame)
    MergeFrom(*source);
  }
}

void SSL_DetectionFrame::MergeFrom(const SSL_DetectionFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_DetectionFrame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  balls_.MergeFrom(from.balls_);
  robots_yellow_.MergeFrom(from.robots_yellow_);
  robots_blue_.MergeFrom(from.robots_blue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frame_number()) {
      set_frame_number(from.frame_number());
    }
    if (from.has_t_capture()) {
      set_t_capture(from.t_capture());
    }
    if (from.has_t_sent()) {
      set_t_sent(from.t_sent());
    }
    if (from.has_camera_id()) {
      set_camera_id(from.camera_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SSL_DetectionFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_DetectionFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_DetectionFrame::CopyFrom(const SSL_DetectionFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_DetectionFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_DetectionFrame::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->balls())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->robots_yellow())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->robots_blue())) return false;
  return true;
}

void SSL_DetectionFrame::Swap(SSL_DetectionFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_DetectionFrame::InternalSwap(SSL_DetectionFrame* other) {
  std::swap(frame_number_, other->frame_number_);
  std::swap(t_capture_, other->t_capture_);
  std::swap(t_sent_, other->t_sent_);
  std::swap(camera_id_, other->camera_id_);
  balls_.UnsafeArenaSwap(&other->balls_);
  robots_yellow_.UnsafeArenaSwap(&other->robots_yellow_);
  robots_blue_.UnsafeArenaSwap(&other->robots_blue_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSL_DetectionFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SSL_DetectionFrame_descriptor_;
  metadata.reflection = SSL_DetectionFrame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SSL_DetectionFrame

// required uint32 frame_number = 1;
bool SSL_DetectionFrame::has_frame_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SSL_DetectionFrame::set_has_frame_number() {
  _has_bits_[0] |= 0x00000001u;
}
void SSL_DetectionFrame::clear_has_frame_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void SSL_DetectionFrame::clear_frame_number() {
  frame_number_ = 0u;
  clear_has_frame_number();
}
 ::google::protobuf::uint32 SSL_DetectionFrame::frame_number() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionFrame.frame_number)
  return frame_number_;
}
 void SSL_DetectionFrame::set_frame_number(::google::protobuf::uint32 value) {
  set_has_frame_number();
  frame_number_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionFrame.frame_number)
}

// required double t_capture = 2;
bool SSL_DetectionFrame::has_t_capture() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SSL_DetectionFrame::set_has_t_capture() {
  _has_bits_[0] |= 0x00000002u;
}
void SSL_DetectionFrame::clear_has_t_capture() {
  _has_bits_[0] &= ~0x00000002u;
}
void SSL_DetectionFrame::clear_t_capture() {
  t_capture_ = 0;
  clear_has_t_capture();
}
 double SSL_DetectionFrame::t_capture() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionFrame.t_capture)
  return t_capture_;
}
 void SSL_DetectionFrame::set_t_capture(double value) {
  set_has_t_capture();
  t_capture_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionFrame.t_capture)
}

// required double t_sent = 3;
bool SSL_DetectionFrame::has_t_sent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SSL_DetectionFrame::set_has_t_sent() {
  _has_bits_[0] |= 0x00000004u;
}
void SSL_DetectionFrame::clear_has_t_sent() {
  _has_bits_[0] &= ~0x00000004u;
}
void SSL_DetectionFrame::clear_t_sent() {
  t_sent_ = 0;
  clear_has_t_sent();
}
 double SSL_DetectionFrame::t_sent() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionFrame.t_sent)
  return t_sent_;
}
 void SSL_DetectionFrame::set_t_sent(double value) {
  set_has_t_sent();
  t_sent_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionFrame.t_sent)
}

// required uint32 camera_id = 4;
bool SSL_DetectionFrame::has_camera_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SSL_DetectionFrame::set_has_camera_id() {
  _has_bits_[0] |= 0x00000008u;
}
void SSL_DetectionFrame::clear_has_camera_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void SSL_DetectionFrame::clear_camera_id() {
  camera_id_ = 0u;
  clear_has_camera_id();
}
 ::google::protobuf::uint32 SSL_DetectionFrame::camera_id() const {
  // @@protoc_insertion_point(field_get:SSL_DetectionFrame.camera_id)
  return camera_id_;
}
 void SSL_DetectionFrame::set_camera_id(::google::protobuf::uint32 value) {
  set_has_camera_id();
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:SSL_DetectionFrame.camera_id)
}

// repeated .SSL_DetectionBall balls = 5;
int SSL_DetectionFrame::balls_size() const {
  return balls_.size();
}
void SSL_DetectionFrame::clear_balls() {
  balls_.Clear();
}
const ::SSL_DetectionBall& SSL_DetectionFrame::balls(int index) const {
  // @@protoc_insertion_point(field_get:SSL_DetectionFrame.balls)
  return balls_.Get(index);
}
::SSL_DetectionBall* SSL_DetectionFrame::mutable_balls(int index) {
  // @@protoc_insertion_point(field_mutable:SSL_DetectionFrame.balls)
  return balls_.Mutable(index);
}
::SSL_DetectionBall* SSL_DetectionFrame::add_balls() {
  // @@protoc_insertion_point(field_add:SSL_DetectionFrame.balls)
  return balls_.Add();
}
::google::protobuf::RepeatedPtrField< ::SSL_DetectionBall >*
SSL_DetectionFrame::mutable_balls() {
  // @@protoc_insertion_point(field_mutable_list:SSL_DetectionFrame.balls)
  return &balls_;
}
const ::google::protobuf::RepeatedPtrField< ::SSL_DetectionBall >&
SSL_DetectionFrame::balls() const {
  // @@protoc_insertion_point(field_list:SSL_DetectionFrame.balls)
  return balls_;
}

// repeated .SSL_DetectionRobot robots_yellow = 6;
int SSL_DetectionFrame::robots_yellow_size() const {
  return robots_yellow_.size();
}
void SSL_DetectionFrame::clear_robots_yellow() {
  robots_yellow_.Clear();
}
const ::SSL_DetectionRobot& SSL_DetectionFrame::robots_yellow(int index) const {
  // @@protoc_insertion_point(field_get:SSL_DetectionFrame.robots_yellow)
  return robots_yellow_.Get(index);
}
::SSL_DetectionRobot* SSL_DetectionFrame::mutable_robots_yellow(int index) {
  // @@protoc_insertion_point(field_mutable:SSL_DetectionFrame.robots_yellow)
  return robots_yellow_.Mutable(index);
}
::SSL_DetectionRobot* SSL_DetectionFrame::add_robots_yellow() {
  // @@protoc_insertion_point(field_add:SSL_DetectionFrame.robots_yellow)
  return robots_yellow_.Add();
}
::google::protobuf::RepeatedPtrField< ::SSL_DetectionRobot >*
SSL_DetectionFrame::mutable_robots_yellow() {
  // @@protoc_insertion_point(field_mutable_list:SSL_DetectionFrame.robots_yellow)
  return &robots_yellow_;
}
const ::google::protobuf::RepeatedPtrField< ::SSL_DetectionRobot >&
SSL_DetectionFrame::robots_yellow() const {
  // @@protoc_insertion_point(field_list:SSL_DetectionFrame.robots_yellow)
  return robots_yellow_;
}

// repeated .SSL_DetectionRobot robots_blue = 7;
int SSL_DetectionFrame::robots_blue_size() const {
  return robots_blue_.size();
}
void SSL_DetectionFrame::clear_robots_blue() {
  robots_blue_.Clear();
}
const ::SSL_DetectionRobot& SSL_DetectionFrame::robots_blue(int index) const {
  // @@protoc_insertion_point(field_get:SSL_DetectionFrame.robots_blue)
  return robots_blue_.Get(index);
}
::SSL_DetectionRobot* SSL_DetectionFrame::mutable_robots_blue(int index) {
  // @@protoc_insertion_point(field_mutable:SSL_DetectionFrame.robots_blue)
  return robots_blue_.Mutable(index);
}
::SSL_DetectionRobot* SSL_DetectionFrame::add_robots_blue() {
  // @@protoc_insertion_point(field_add:SSL_DetectionFrame.robots_blue)
  return robots_blue_.Add();
}
::google::protobuf::RepeatedPtrField< ::SSL_DetectionRobot >*
SSL_DetectionFrame::mutable_robots_blue() {
  // @@protoc_insertion_point(field_mutable_list:SSL_DetectionFrame.robots_blue)
  return &robots_blue_;
}
const ::google::protobuf::RepeatedPtrField< ::SSL_DetectionRobot >&
SSL_DetectionFrame::robots_blue() const {
  // @@protoc_insertion_point(field_list:SSL_DetectionFrame.robots_blue)
  return robots_blue_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
