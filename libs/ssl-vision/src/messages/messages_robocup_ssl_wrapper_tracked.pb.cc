// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_robocup_ssl_wrapper_tracked.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "libs/ssl-vision/include/messages/messages_robocup_ssl_wrapper_tracked.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* TrackerWrapperPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackerWrapperPacket_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto() {
  protobuf_AddDesc_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages_robocup_ssl_wrapper_tracked.proto");
  GOOGLE_CHECK(file != NULL);
  TrackerWrapperPacket_descriptor_ = file->message_type(0);
  static const int TrackerWrapperPacket_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerWrapperPacket, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerWrapperPacket, source_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerWrapperPacket, tracked_frame_),
  };
  TrackerWrapperPacket_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrackerWrapperPacket_descriptor_,
      TrackerWrapperPacket::default_instance_,
      TrackerWrapperPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerWrapperPacket, _has_bits_[0]),
      -1,
      -1,
      sizeof(TrackerWrapperPacket),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerWrapperPacket, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrackerWrapperPacket_descriptor_, &TrackerWrapperPacket::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto() {
  delete TrackerWrapperPacket::default_instance_;
  delete TrackerWrapperPacket_reflection_;
}

void protobuf_AddDesc_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n*messages_robocup_ssl_wrapper_tracked.p"
    "roto\032,messages_robocup_ssl_detection_tra"
    "cked.proto\"_\n\024TrackerWrapperPacket\022\014\n\004uu"
    "id\030\001 \002(\t\022\023\n\013source_name\030\002 \001(\t\022$\n\rtracked"
    "_frame\030\003 \001(\0132\r.TrackedFrame", 187);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages_robocup_ssl_wrapper_tracked.proto", &protobuf_RegisterTypes);
  TrackerWrapperPacket::default_instance_ = new TrackerWrapperPacket();
  TrackerWrapperPacket::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto {
  StaticDescriptorInitializer_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto() {
    protobuf_AddDesc_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto();
  }
} static_descriptor_initializer_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackerWrapperPacket::kUuidFieldNumber;
const int TrackerWrapperPacket::kSourceNameFieldNumber;
const int TrackerWrapperPacket::kTrackedFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackerWrapperPacket::TrackerWrapperPacket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TrackerWrapperPacket)
}

void TrackerWrapperPacket::InitAsDefaultInstance() {
  tracked_frame_ = const_cast< ::TrackedFrame*>(&::TrackedFrame::default_instance());
}

TrackerWrapperPacket::TrackerWrapperPacket(const TrackerWrapperPacket& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TrackerWrapperPacket)
}

void TrackerWrapperPacket::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tracked_frame_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackerWrapperPacket::~TrackerWrapperPacket() {
  // @@protoc_insertion_point(destructor:TrackerWrapperPacket)
  SharedDtor();
}

void TrackerWrapperPacket::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete tracked_frame_;
  }
}

void TrackerWrapperPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackerWrapperPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackerWrapperPacket_descriptor_;
}

const TrackerWrapperPacket& TrackerWrapperPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_5frobocup_5fssl_5fwrapper_5ftracked_2eproto();
  return *default_instance_;
}

TrackerWrapperPacket* TrackerWrapperPacket::default_instance_ = NULL;

TrackerWrapperPacket* TrackerWrapperPacket::New(::google::protobuf::Arena* arena) const {
  TrackerWrapperPacket* n = new TrackerWrapperPacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrackerWrapperPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:TrackerWrapperPacket)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_uuid()) {
      uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_source_name()) {
      source_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_tracked_frame()) {
      if (tracked_frame_ != NULL) tracked_frame_->::TrackedFrame::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrackerWrapperPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TrackerWrapperPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TrackerWrapperPacket.uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_source_name;
        break;
      }

      // optional string source_name = 2;
      case 2: {
        if (tag == 18) {
         parse_source_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source_name().data(), this->source_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TrackerWrapperPacket.source_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tracked_frame;
        break;
      }

      // optional .TrackedFrame tracked_frame = 3;
      case 3: {
        if (tag == 26) {
         parse_tracked_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tracked_frame()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TrackerWrapperPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TrackerWrapperPacket)
  return false;
#undef DO_
}

void TrackerWrapperPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TrackerWrapperPacket)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TrackerWrapperPacket.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // optional string source_name = 2;
  if (has_source_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_name().data(), this->source_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TrackerWrapperPacket.source_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->source_name(), output);
  }

  // optional .TrackedFrame tracked_frame = 3;
  if (has_tracked_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->tracked_frame_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TrackerWrapperPacket)
}

::google::protobuf::uint8* TrackerWrapperPacket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TrackerWrapperPacket)
  // required string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TrackerWrapperPacket.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // optional string source_name = 2;
  if (has_source_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source_name().data(), this->source_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TrackerWrapperPacket.source_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->source_name(), target);
  }

  // optional .TrackedFrame tracked_frame = 3;
  if (has_tracked_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->tracked_frame_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrackerWrapperPacket)
  return target;
}

int TrackerWrapperPacket::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:TrackerWrapperPacket)
  int total_size = 0;

  // required string uuid = 1;
  if (has_uuid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional string source_name = 2;
    if (has_source_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_name());
    }

    // optional .TrackedFrame tracked_frame = 3;
    if (has_tracked_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tracked_frame_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackerWrapperPacket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TrackerWrapperPacket)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TrackerWrapperPacket* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackerWrapperPacket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TrackerWrapperPacket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TrackerWrapperPacket)
    MergeFrom(*source);
  }
}

void TrackerWrapperPacket::MergeFrom(const TrackerWrapperPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TrackerWrapperPacket)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
    if (from.has_source_name()) {
      set_has_source_name();
      source_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_name_);
    }
    if (from.has_tracked_frame()) {
      mutable_tracked_frame()->::TrackedFrame::MergeFrom(from.tracked_frame());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TrackerWrapperPacket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TrackerWrapperPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackerWrapperPacket::CopyFrom(const TrackerWrapperPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TrackerWrapperPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackerWrapperPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_tracked_frame()) {
    if (!this->tracked_frame_->IsInitialized()) return false;
  }
  return true;
}

void TrackerWrapperPacket::Swap(TrackerWrapperPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackerWrapperPacket::InternalSwap(TrackerWrapperPacket* other) {
  uuid_.Swap(&other->uuid_);
  source_name_.Swap(&other->source_name_);
  std::swap(tracked_frame_, other->tracked_frame_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackerWrapperPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackerWrapperPacket_descriptor_;
  metadata.reflection = TrackerWrapperPacket_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackerWrapperPacket

// required string uuid = 1;
bool TrackerWrapperPacket::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrackerWrapperPacket::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
void TrackerWrapperPacket::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrackerWrapperPacket::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
 const ::std::string& TrackerWrapperPacket::uuid() const {
  // @@protoc_insertion_point(field_get:TrackerWrapperPacket.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrackerWrapperPacket::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TrackerWrapperPacket.uuid)
}
 void TrackerWrapperPacket::set_uuid(const char* value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TrackerWrapperPacket.uuid)
}
 void TrackerWrapperPacket::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TrackerWrapperPacket.uuid)
}
 ::std::string* TrackerWrapperPacket::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:TrackerWrapperPacket.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TrackerWrapperPacket::release_uuid() {
  // @@protoc_insertion_point(field_release:TrackerWrapperPacket.uuid)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrackerWrapperPacket::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:TrackerWrapperPacket.uuid)
}

// optional string source_name = 2;
bool TrackerWrapperPacket::has_source_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrackerWrapperPacket::set_has_source_name() {
  _has_bits_[0] |= 0x00000002u;
}
void TrackerWrapperPacket::clear_has_source_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrackerWrapperPacket::clear_source_name() {
  source_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_name();
}
 const ::std::string& TrackerWrapperPacket::source_name() const {
  // @@protoc_insertion_point(field_get:TrackerWrapperPacket.source_name)
  return source_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrackerWrapperPacket::set_source_name(const ::std::string& value) {
  set_has_source_name();
  source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TrackerWrapperPacket.source_name)
}
 void TrackerWrapperPacket::set_source_name(const char* value) {
  set_has_source_name();
  source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TrackerWrapperPacket.source_name)
}
 void TrackerWrapperPacket::set_source_name(const char* value, size_t size) {
  set_has_source_name();
  source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TrackerWrapperPacket.source_name)
}
 ::std::string* TrackerWrapperPacket::mutable_source_name() {
  set_has_source_name();
  // @@protoc_insertion_point(field_mutable:TrackerWrapperPacket.source_name)
  return source_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TrackerWrapperPacket::release_source_name() {
  // @@protoc_insertion_point(field_release:TrackerWrapperPacket.source_name)
  clear_has_source_name();
  return source_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TrackerWrapperPacket::set_allocated_source_name(::std::string* source_name) {
  if (source_name != NULL) {
    set_has_source_name();
  } else {
    clear_has_source_name();
  }
  source_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_name);
  // @@protoc_insertion_point(field_set_allocated:TrackerWrapperPacket.source_name)
}

// optional .TrackedFrame tracked_frame = 3;
bool TrackerWrapperPacket::has_tracked_frame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrackerWrapperPacket::set_has_tracked_frame() {
  _has_bits_[0] |= 0x00000004u;
}
void TrackerWrapperPacket::clear_has_tracked_frame() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrackerWrapperPacket::clear_tracked_frame() {
  if (tracked_frame_ != NULL) tracked_frame_->::TrackedFrame::Clear();
  clear_has_tracked_frame();
}
const ::TrackedFrame& TrackerWrapperPacket::tracked_frame() const {
  // @@protoc_insertion_point(field_get:TrackerWrapperPacket.tracked_frame)
  return tracked_frame_ != NULL ? *tracked_frame_ : *default_instance_->tracked_frame_;
}
::TrackedFrame* TrackerWrapperPacket::mutable_tracked_frame() {
  set_has_tracked_frame();
  if (tracked_frame_ == NULL) {
    tracked_frame_ = new ::TrackedFrame;
  }
  // @@protoc_insertion_point(field_mutable:TrackerWrapperPacket.tracked_frame)
  return tracked_frame_;
}
::TrackedFrame* TrackerWrapperPacket::release_tracked_frame() {
  // @@protoc_insertion_point(field_release:TrackerWrapperPacket.tracked_frame)
  clear_has_tracked_frame();
  ::TrackedFrame* temp = tracked_frame_;
  tracked_frame_ = NULL;
  return temp;
}
void TrackerWrapperPacket::set_allocated_tracked_frame(::TrackedFrame* tracked_frame) {
  delete tracked_frame_;
  tracked_frame_ = tracked_frame;
  if (tracked_frame) {
    set_has_tracked_frame();
  } else {
    clear_has_tracked_frame();
  }
  // @@protoc_insertion_point(field_set_allocated:TrackerWrapperPacket.tracked_frame)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
