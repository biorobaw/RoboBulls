// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_robocup_ssl_geometry.proto

#ifndef PROTOBUF_messages_5frobocup_5fssl_5fgeometry_2eproto__INCLUDED
#define PROTOBUF_messages_5frobocup_5fssl_5fgeometry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto();
void protobuf_AssignDesc_messages_5frobocup_5fssl_5fgeometry_2eproto();
void protobuf_ShutdownFile_messages_5frobocup_5fssl_5fgeometry_2eproto();

class SSL_FieldCicularArc;
class SSL_FieldLineSegment;
class SSL_GeometryCameraCalibration;
class SSL_GeometryData;
class SSL_GeometryFieldSize;
class Vector2f;

enum SSL_FieldShapeType {
  Undefined = 0,
  CenterCircle = 1,
  TopTouchLine = 2,
  BottomTouchLine = 3,
  LeftGoalLine = 4,
  RightGoalLine = 5,
  HalfwayLine = 6,
  CenterLine = 7,
  LeftPenaltyStretch = 8,
  RightPenaltyStretch = 9,
  LeftFieldLeftPenaltyStretch = 10,
  LeftFieldRightPenaltyStretch = 11,
  RightFieldLeftPenaltyStretch = 12,
  RightFieldRightPenaltyStretch = 13
};
bool SSL_FieldShapeType_IsValid(int value);
const SSL_FieldShapeType SSL_FieldShapeType_MIN = Undefined;
const SSL_FieldShapeType SSL_FieldShapeType_MAX = RightFieldRightPenaltyStretch;
const int SSL_FieldShapeType_ARRAYSIZE = SSL_FieldShapeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SSL_FieldShapeType_descriptor();
inline const ::std::string& SSL_FieldShapeType_Name(SSL_FieldShapeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SSL_FieldShapeType_descriptor(), value);
}
inline bool SSL_FieldShapeType_Parse(
    const ::std::string& name, SSL_FieldShapeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SSL_FieldShapeType>(
    SSL_FieldShapeType_descriptor(), name, value);
}
// ===================================================================

class Vector2f : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Vector2f) */ {
 public:
  Vector2f();
  virtual ~Vector2f();

  Vector2f(const Vector2f& from);

  inline Vector2f& operator=(const Vector2f& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector2f& default_instance();

  void Swap(Vector2f* other);

  // implements Message ----------------------------------------------

  inline Vector2f* New() const { return New(NULL); }

  Vector2f* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector2f& from);
  void MergeFrom(const Vector2f& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vector2f* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:Vector2f)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  friend void  protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto();
  friend void protobuf_AssignDesc_messages_5frobocup_5fssl_5fgeometry_2eproto();
  friend void protobuf_ShutdownFile_messages_5frobocup_5fssl_5fgeometry_2eproto();

  void InitAsDefaultInstance();
  static Vector2f* default_instance_;
};
// -------------------------------------------------------------------

class SSL_FieldLineSegment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SSL_FieldLineSegment) */ {
 public:
  SSL_FieldLineSegment();
  virtual ~SSL_FieldLineSegment();

  SSL_FieldLineSegment(const SSL_FieldLineSegment& from);

  inline SSL_FieldLineSegment& operator=(const SSL_FieldLineSegment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSL_FieldLineSegment& default_instance();

  void Swap(SSL_FieldLineSegment* other);

  // implements Message ----------------------------------------------

  inline SSL_FieldLineSegment* New() const { return New(NULL); }

  SSL_FieldLineSegment* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSL_FieldLineSegment& from);
  void MergeFrom(const SSL_FieldLineSegment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SSL_FieldLineSegment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required .Vector2f p1 = 2;
  bool has_p1() const;
  void clear_p1();
  static const int kP1FieldNumber = 2;
  const ::Vector2f& p1() const;
  ::Vector2f* mutable_p1();
  ::Vector2f* release_p1();
  void set_allocated_p1(::Vector2f* p1);

  // required .Vector2f p2 = 3;
  bool has_p2() const;
  void clear_p2();
  static const int kP2FieldNumber = 3;
  const ::Vector2f& p2() const;
  ::Vector2f* mutable_p2();
  ::Vector2f* release_p2();
  void set_allocated_p2(::Vector2f* p2);

  // required float thickness = 4;
  bool has_thickness() const;
  void clear_thickness();
  static const int kThicknessFieldNumber = 4;
  float thickness() const;
  void set_thickness(float value);

  // optional .SSL_FieldShapeType type = 5;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::SSL_FieldShapeType type() const;
  void set_type(::SSL_FieldShapeType value);

  // @@protoc_insertion_point(class_scope:SSL_FieldLineSegment)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_p1();
  inline void clear_has_p1();
  inline void set_has_p2();
  inline void clear_has_p2();
  inline void set_has_thickness();
  inline void clear_has_thickness();
  inline void set_has_type();
  inline void clear_has_type();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::Vector2f* p1_;
  ::Vector2f* p2_;
  float thickness_;
  int type_;
  friend void  protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto();
  friend void protobuf_AssignDesc_messages_5frobocup_5fssl_5fgeometry_2eproto();
  friend void protobuf_ShutdownFile_messages_5frobocup_5fssl_5fgeometry_2eproto();

  void InitAsDefaultInstance();
  static SSL_FieldLineSegment* default_instance_;
};
// -------------------------------------------------------------------

class SSL_FieldCicularArc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SSL_FieldCicularArc) */ {
 public:
  SSL_FieldCicularArc();
  virtual ~SSL_FieldCicularArc();

  SSL_FieldCicularArc(const SSL_FieldCicularArc& from);

  inline SSL_FieldCicularArc& operator=(const SSL_FieldCicularArc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSL_FieldCicularArc& default_instance();

  void Swap(SSL_FieldCicularArc* other);

  // implements Message ----------------------------------------------

  inline SSL_FieldCicularArc* New() const { return New(NULL); }

  SSL_FieldCicularArc* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSL_FieldCicularArc& from);
  void MergeFrom(const SSL_FieldCicularArc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SSL_FieldCicularArc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required .Vector2f center = 2;
  bool has_center() const;
  void clear_center();
  static const int kCenterFieldNumber = 2;
  const ::Vector2f& center() const;
  ::Vector2f* mutable_center();
  ::Vector2f* release_center();
  void set_allocated_center(::Vector2f* center);

  // required float radius = 3;
  bool has_radius() const;
  void clear_radius();
  static const int kRadiusFieldNumber = 3;
  float radius() const;
  void set_radius(float value);

  // required float a1 = 4;
  bool has_a1() const;
  void clear_a1();
  static const int kA1FieldNumber = 4;
  float a1() const;
  void set_a1(float value);

  // required float a2 = 5;
  bool has_a2() const;
  void clear_a2();
  static const int kA2FieldNumber = 5;
  float a2() const;
  void set_a2(float value);

  // required float thickness = 6;
  bool has_thickness() const;
  void clear_thickness();
  static const int kThicknessFieldNumber = 6;
  float thickness() const;
  void set_thickness(float value);

  // optional .SSL_FieldShapeType type = 7;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 7;
  ::SSL_FieldShapeType type() const;
  void set_type(::SSL_FieldShapeType value);

  // @@protoc_insertion_point(class_scope:SSL_FieldCicularArc)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_center();
  inline void clear_has_center();
  inline void set_has_radius();
  inline void clear_has_radius();
  inline void set_has_a1();
  inline void clear_has_a1();
  inline void set_has_a2();
  inline void clear_has_a2();
  inline void set_has_thickness();
  inline void clear_has_thickness();
  inline void set_has_type();
  inline void clear_has_type();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::Vector2f* center_;
  float radius_;
  float a1_;
  float a2_;
  float thickness_;
  int type_;
  friend void  protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto();
  friend void protobuf_AssignDesc_messages_5frobocup_5fssl_5fgeometry_2eproto();
  friend void protobuf_ShutdownFile_messages_5frobocup_5fssl_5fgeometry_2eproto();

  void InitAsDefaultInstance();
  static SSL_FieldCicularArc* default_instance_;
};
// -------------------------------------------------------------------

class SSL_GeometryFieldSize : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SSL_GeometryFieldSize) */ {
 public:
  SSL_GeometryFieldSize();
  virtual ~SSL_GeometryFieldSize();

  SSL_GeometryFieldSize(const SSL_GeometryFieldSize& from);

  inline SSL_GeometryFieldSize& operator=(const SSL_GeometryFieldSize& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSL_GeometryFieldSize& default_instance();

  void Swap(SSL_GeometryFieldSize* other);

  // implements Message ----------------------------------------------

  inline SSL_GeometryFieldSize* New() const { return New(NULL); }

  SSL_GeometryFieldSize* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSL_GeometryFieldSize& from);
  void MergeFrom(const SSL_GeometryFieldSize& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SSL_GeometryFieldSize* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 field_length = 1;
  bool has_field_length() const;
  void clear_field_length();
  static const int kFieldLengthFieldNumber = 1;
  ::google::protobuf::int32 field_length() const;
  void set_field_length(::google::protobuf::int32 value);

  // required int32 field_width = 2;
  bool has_field_width() const;
  void clear_field_width();
  static const int kFieldWidthFieldNumber = 2;
  ::google::protobuf::int32 field_width() const;
  void set_field_width(::google::protobuf::int32 value);

  // required int32 goal_width = 3;
  bool has_goal_width() const;
  void clear_goal_width();
  static const int kGoalWidthFieldNumber = 3;
  ::google::protobuf::int32 goal_width() const;
  void set_goal_width(::google::protobuf::int32 value);

  // required int32 goal_depth = 4;
  bool has_goal_depth() const;
  void clear_goal_depth();
  static const int kGoalDepthFieldNumber = 4;
  ::google::protobuf::int32 goal_depth() const;
  void set_goal_depth(::google::protobuf::int32 value);

  // required int32 boundary_width = 5;
  bool has_boundary_width() const;
  void clear_boundary_width();
  static const int kBoundaryWidthFieldNumber = 5;
  ::google::protobuf::int32 boundary_width() const;
  void set_boundary_width(::google::protobuf::int32 value);

  // repeated .SSL_FieldLineSegment field_lines = 6;
  int field_lines_size() const;
  void clear_field_lines();
  static const int kFieldLinesFieldNumber = 6;
  const ::SSL_FieldLineSegment& field_lines(int index) const;
  ::SSL_FieldLineSegment* mutable_field_lines(int index);
  ::SSL_FieldLineSegment* add_field_lines();
  ::google::protobuf::RepeatedPtrField< ::SSL_FieldLineSegment >*
      mutable_field_lines();
  const ::google::protobuf::RepeatedPtrField< ::SSL_FieldLineSegment >&
      field_lines() const;

  // repeated .SSL_FieldCicularArc field_arcs = 7;
  int field_arcs_size() const;
  void clear_field_arcs();
  static const int kFieldArcsFieldNumber = 7;
  const ::SSL_FieldCicularArc& field_arcs(int index) const;
  ::SSL_FieldCicularArc* mutable_field_arcs(int index);
  ::SSL_FieldCicularArc* add_field_arcs();
  ::google::protobuf::RepeatedPtrField< ::SSL_FieldCicularArc >*
      mutable_field_arcs();
  const ::google::protobuf::RepeatedPtrField< ::SSL_FieldCicularArc >&
      field_arcs() const;

  // optional int32 penalty_area_depth = 8;
  bool has_penalty_area_depth() const;
  void clear_penalty_area_depth();
  static const int kPenaltyAreaDepthFieldNumber = 8;
  ::google::protobuf::int32 penalty_area_depth() const;
  void set_penalty_area_depth(::google::protobuf::int32 value);

  // optional int32 penalty_area_width = 9;
  bool has_penalty_area_width() const;
  void clear_penalty_area_width();
  static const int kPenaltyAreaWidthFieldNumber = 9;
  ::google::protobuf::int32 penalty_area_width() const;
  void set_penalty_area_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SSL_GeometryFieldSize)
 private:
  inline void set_has_field_length();
  inline void clear_has_field_length();
  inline void set_has_field_width();
  inline void clear_has_field_width();
  inline void set_has_goal_width();
  inline void clear_has_goal_width();
  inline void set_has_goal_depth();
  inline void clear_has_goal_depth();
  inline void set_has_boundary_width();
  inline void clear_has_boundary_width();
  inline void set_has_penalty_area_depth();
  inline void clear_has_penalty_area_depth();
  inline void set_has_penalty_area_width();
  inline void clear_has_penalty_area_width();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 field_length_;
  ::google::protobuf::int32 field_width_;
  ::google::protobuf::int32 goal_width_;
  ::google::protobuf::int32 goal_depth_;
  ::google::protobuf::RepeatedPtrField< ::SSL_FieldLineSegment > field_lines_;
  ::google::protobuf::int32 boundary_width_;
  ::google::protobuf::int32 penalty_area_depth_;
  ::google::protobuf::RepeatedPtrField< ::SSL_FieldCicularArc > field_arcs_;
  ::google::protobuf::int32 penalty_area_width_;
  friend void  protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto();
  friend void protobuf_AssignDesc_messages_5frobocup_5fssl_5fgeometry_2eproto();
  friend void protobuf_ShutdownFile_messages_5frobocup_5fssl_5fgeometry_2eproto();

  void InitAsDefaultInstance();
  static SSL_GeometryFieldSize* default_instance_;
};
// -------------------------------------------------------------------

class SSL_GeometryCameraCalibration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SSL_GeometryCameraCalibration) */ {
 public:
  SSL_GeometryCameraCalibration();
  virtual ~SSL_GeometryCameraCalibration();

  SSL_GeometryCameraCalibration(const SSL_GeometryCameraCalibration& from);

  inline SSL_GeometryCameraCalibration& operator=(const SSL_GeometryCameraCalibration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSL_GeometryCameraCalibration& default_instance();

  void Swap(SSL_GeometryCameraCalibration* other);

  // implements Message ----------------------------------------------

  inline SSL_GeometryCameraCalibration* New() const { return New(NULL); }

  SSL_GeometryCameraCalibration* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSL_GeometryCameraCalibration& from);
  void MergeFrom(const SSL_GeometryCameraCalibration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SSL_GeometryCameraCalibration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 camera_id = 1;
  bool has_camera_id() const;
  void clear_camera_id();
  static const int kCameraIdFieldNumber = 1;
  ::google::protobuf::uint32 camera_id() const;
  void set_camera_id(::google::protobuf::uint32 value);

  // required float focal_length = 2;
  bool has_focal_length() const;
  void clear_focal_length();
  static const int kFocalLengthFieldNumber = 2;
  float focal_length() const;
  void set_focal_length(float value);

  // required float principal_point_x = 3;
  bool has_principal_point_x() const;
  void clear_principal_point_x();
  static const int kPrincipalPointXFieldNumber = 3;
  float principal_point_x() const;
  void set_principal_point_x(float value);

  // required float principal_point_y = 4;
  bool has_principal_point_y() const;
  void clear_principal_point_y();
  static const int kPrincipalPointYFieldNumber = 4;
  float principal_point_y() const;
  void set_principal_point_y(float value);

  // required float distortion = 5;
  bool has_distortion() const;
  void clear_distortion();
  static const int kDistortionFieldNumber = 5;
  float distortion() const;
  void set_distortion(float value);

  // required float q0 = 6;
  bool has_q0() const;
  void clear_q0();
  static const int kQ0FieldNumber = 6;
  float q0() const;
  void set_q0(float value);

  // required float q1 = 7;
  bool has_q1() const;
  void clear_q1();
  static const int kQ1FieldNumber = 7;
  float q1() const;
  void set_q1(float value);

  // required float q2 = 8;
  bool has_q2() const;
  void clear_q2();
  static const int kQ2FieldNumber = 8;
  float q2() const;
  void set_q2(float value);

  // required float q3 = 9;
  bool has_q3() const;
  void clear_q3();
  static const int kQ3FieldNumber = 9;
  float q3() const;
  void set_q3(float value);

  // required float tx = 10;
  bool has_tx() const;
  void clear_tx();
  static const int kTxFieldNumber = 10;
  float tx() const;
  void set_tx(float value);

  // required float ty = 11;
  bool has_ty() const;
  void clear_ty();
  static const int kTyFieldNumber = 11;
  float ty() const;
  void set_ty(float value);

  // required float tz = 12;
  bool has_tz() const;
  void clear_tz();
  static const int kTzFieldNumber = 12;
  float tz() const;
  void set_tz(float value);

  // optional float derived_camera_world_tx = 13;
  bool has_derived_camera_world_tx() const;
  void clear_derived_camera_world_tx();
  static const int kDerivedCameraWorldTxFieldNumber = 13;
  float derived_camera_world_tx() const;
  void set_derived_camera_world_tx(float value);

  // optional float derived_camera_world_ty = 14;
  bool has_derived_camera_world_ty() const;
  void clear_derived_camera_world_ty();
  static const int kDerivedCameraWorldTyFieldNumber = 14;
  float derived_camera_world_ty() const;
  void set_derived_camera_world_ty(float value);

  // optional float derived_camera_world_tz = 15;
  bool has_derived_camera_world_tz() const;
  void clear_derived_camera_world_tz();
  static const int kDerivedCameraWorldTzFieldNumber = 15;
  float derived_camera_world_tz() const;
  void set_derived_camera_world_tz(float value);

  // @@protoc_insertion_point(class_scope:SSL_GeometryCameraCalibration)
 private:
  inline void set_has_camera_id();
  inline void clear_has_camera_id();
  inline void set_has_focal_length();
  inline void clear_has_focal_length();
  inline void set_has_principal_point_x();
  inline void clear_has_principal_point_x();
  inline void set_has_principal_point_y();
  inline void clear_has_principal_point_y();
  inline void set_has_distortion();
  inline void clear_has_distortion();
  inline void set_has_q0();
  inline void clear_has_q0();
  inline void set_has_q1();
  inline void clear_has_q1();
  inline void set_has_q2();
  inline void clear_has_q2();
  inline void set_has_q3();
  inline void clear_has_q3();
  inline void set_has_tx();
  inline void clear_has_tx();
  inline void set_has_ty();
  inline void clear_has_ty();
  inline void set_has_tz();
  inline void clear_has_tz();
  inline void set_has_derived_camera_world_tx();
  inline void clear_has_derived_camera_world_tx();
  inline void set_has_derived_camera_world_ty();
  inline void clear_has_derived_camera_world_ty();
  inline void set_has_derived_camera_world_tz();
  inline void clear_has_derived_camera_world_tz();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 camera_id_;
  float focal_length_;
  float principal_point_x_;
  float principal_point_y_;
  float distortion_;
  float q0_;
  float q1_;
  float q2_;
  float q3_;
  float tx_;
  float ty_;
  float tz_;
  float derived_camera_world_tx_;
  float derived_camera_world_ty_;
  float derived_camera_world_tz_;
  friend void  protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto();
  friend void protobuf_AssignDesc_messages_5frobocup_5fssl_5fgeometry_2eproto();
  friend void protobuf_ShutdownFile_messages_5frobocup_5fssl_5fgeometry_2eproto();

  void InitAsDefaultInstance();
  static SSL_GeometryCameraCalibration* default_instance_;
};
// -------------------------------------------------------------------

class SSL_GeometryData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SSL_GeometryData) */ {
 public:
  SSL_GeometryData();
  virtual ~SSL_GeometryData();

  SSL_GeometryData(const SSL_GeometryData& from);

  inline SSL_GeometryData& operator=(const SSL_GeometryData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSL_GeometryData& default_instance();

  void Swap(SSL_GeometryData* other);

  // implements Message ----------------------------------------------

  inline SSL_GeometryData* New() const { return New(NULL); }

  SSL_GeometryData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SSL_GeometryData& from);
  void MergeFrom(const SSL_GeometryData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SSL_GeometryData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .SSL_GeometryFieldSize field = 1;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  const ::SSL_GeometryFieldSize& field() const;
  ::SSL_GeometryFieldSize* mutable_field();
  ::SSL_GeometryFieldSize* release_field();
  void set_allocated_field(::SSL_GeometryFieldSize* field);

  // repeated .SSL_GeometryCameraCalibration calib = 2;
  int calib_size() const;
  void clear_calib();
  static const int kCalibFieldNumber = 2;
  const ::SSL_GeometryCameraCalibration& calib(int index) const;
  ::SSL_GeometryCameraCalibration* mutable_calib(int index);
  ::SSL_GeometryCameraCalibration* add_calib();
  ::google::protobuf::RepeatedPtrField< ::SSL_GeometryCameraCalibration >*
      mutable_calib();
  const ::google::protobuf::RepeatedPtrField< ::SSL_GeometryCameraCalibration >&
      calib() const;

  // @@protoc_insertion_point(class_scope:SSL_GeometryData)
 private:
  inline void set_has_field();
  inline void clear_has_field();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SSL_GeometryFieldSize* field_;
  ::google::protobuf::RepeatedPtrField< ::SSL_GeometryCameraCalibration > calib_;
  friend void  protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto();
  friend void protobuf_AssignDesc_messages_5frobocup_5fssl_5fgeometry_2eproto();
  friend void protobuf_ShutdownFile_messages_5frobocup_5fssl_5fgeometry_2eproto();

  void InitAsDefaultInstance();
  static SSL_GeometryData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector2f

// required float x = 1;
inline bool Vector2f::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector2f::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector2f::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector2f::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vector2f::x() const {
  // @@protoc_insertion_point(field_get:Vector2f.x)
  return x_;
}
inline void Vector2f::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Vector2f.x)
}

// required float y = 2;
inline bool Vector2f::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector2f::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector2f::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector2f::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vector2f::y() const {
  // @@protoc_insertion_point(field_get:Vector2f.y)
  return y_;
}
inline void Vector2f::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Vector2f.y)
}

// -------------------------------------------------------------------

// SSL_FieldLineSegment

// required string name = 1;
inline bool SSL_FieldLineSegment::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSL_FieldLineSegment::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSL_FieldLineSegment::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSL_FieldLineSegment::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& SSL_FieldLineSegment::name() const {
  // @@protoc_insertion_point(field_get:SSL_FieldLineSegment.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSL_FieldLineSegment::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SSL_FieldLineSegment.name)
}
inline void SSL_FieldLineSegment::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SSL_FieldLineSegment.name)
}
inline void SSL_FieldLineSegment::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SSL_FieldLineSegment.name)
}
inline ::std::string* SSL_FieldLineSegment::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:SSL_FieldLineSegment.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSL_FieldLineSegment::release_name() {
  // @@protoc_insertion_point(field_release:SSL_FieldLineSegment.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSL_FieldLineSegment::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SSL_FieldLineSegment.name)
}

// required .Vector2f p1 = 2;
inline bool SSL_FieldLineSegment::has_p1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSL_FieldLineSegment::set_has_p1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SSL_FieldLineSegment::clear_has_p1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SSL_FieldLineSegment::clear_p1() {
  if (p1_ != NULL) p1_->::Vector2f::Clear();
  clear_has_p1();
}
inline const ::Vector2f& SSL_FieldLineSegment::p1() const {
  // @@protoc_insertion_point(field_get:SSL_FieldLineSegment.p1)
  return p1_ != NULL ? *p1_ : *default_instance_->p1_;
}
inline ::Vector2f* SSL_FieldLineSegment::mutable_p1() {
  set_has_p1();
  if (p1_ == NULL) {
    p1_ = new ::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:SSL_FieldLineSegment.p1)
  return p1_;
}
inline ::Vector2f* SSL_FieldLineSegment::release_p1() {
  // @@protoc_insertion_point(field_release:SSL_FieldLineSegment.p1)
  clear_has_p1();
  ::Vector2f* temp = p1_;
  p1_ = NULL;
  return temp;
}
inline void SSL_FieldLineSegment::set_allocated_p1(::Vector2f* p1) {
  delete p1_;
  p1_ = p1;
  if (p1) {
    set_has_p1();
  } else {
    clear_has_p1();
  }
  // @@protoc_insertion_point(field_set_allocated:SSL_FieldLineSegment.p1)
}

// required .Vector2f p2 = 3;
inline bool SSL_FieldLineSegment::has_p2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SSL_FieldLineSegment::set_has_p2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SSL_FieldLineSegment::clear_has_p2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SSL_FieldLineSegment::clear_p2() {
  if (p2_ != NULL) p2_->::Vector2f::Clear();
  clear_has_p2();
}
inline const ::Vector2f& SSL_FieldLineSegment::p2() const {
  // @@protoc_insertion_point(field_get:SSL_FieldLineSegment.p2)
  return p2_ != NULL ? *p2_ : *default_instance_->p2_;
}
inline ::Vector2f* SSL_FieldLineSegment::mutable_p2() {
  set_has_p2();
  if (p2_ == NULL) {
    p2_ = new ::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:SSL_FieldLineSegment.p2)
  return p2_;
}
inline ::Vector2f* SSL_FieldLineSegment::release_p2() {
  // @@protoc_insertion_point(field_release:SSL_FieldLineSegment.p2)
  clear_has_p2();
  ::Vector2f* temp = p2_;
  p2_ = NULL;
  return temp;
}
inline void SSL_FieldLineSegment::set_allocated_p2(::Vector2f* p2) {
  delete p2_;
  p2_ = p2;
  if (p2) {
    set_has_p2();
  } else {
    clear_has_p2();
  }
  // @@protoc_insertion_point(field_set_allocated:SSL_FieldLineSegment.p2)
}

// required float thickness = 4;
inline bool SSL_FieldLineSegment::has_thickness() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SSL_FieldLineSegment::set_has_thickness() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SSL_FieldLineSegment::clear_has_thickness() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SSL_FieldLineSegment::clear_thickness() {
  thickness_ = 0;
  clear_has_thickness();
}
inline float SSL_FieldLineSegment::thickness() const {
  // @@protoc_insertion_point(field_get:SSL_FieldLineSegment.thickness)
  return thickness_;
}
inline void SSL_FieldLineSegment::set_thickness(float value) {
  set_has_thickness();
  thickness_ = value;
  // @@protoc_insertion_point(field_set:SSL_FieldLineSegment.thickness)
}

// optional .SSL_FieldShapeType type = 5;
inline bool SSL_FieldLineSegment::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SSL_FieldLineSegment::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SSL_FieldLineSegment::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SSL_FieldLineSegment::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::SSL_FieldShapeType SSL_FieldLineSegment::type() const {
  // @@protoc_insertion_point(field_get:SSL_FieldLineSegment.type)
  return static_cast< ::SSL_FieldShapeType >(type_);
}
inline void SSL_FieldLineSegment::set_type(::SSL_FieldShapeType value) {
  assert(::SSL_FieldShapeType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:SSL_FieldLineSegment.type)
}

// -------------------------------------------------------------------

// SSL_FieldCicularArc

// required string name = 1;
inline bool SSL_FieldCicularArc::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSL_FieldCicularArc::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSL_FieldCicularArc::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSL_FieldCicularArc::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& SSL_FieldCicularArc::name() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCicularArc.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSL_FieldCicularArc::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SSL_FieldCicularArc.name)
}
inline void SSL_FieldCicularArc::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SSL_FieldCicularArc.name)
}
inline void SSL_FieldCicularArc::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SSL_FieldCicularArc.name)
}
inline ::std::string* SSL_FieldCicularArc::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:SSL_FieldCicularArc.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SSL_FieldCicularArc::release_name() {
  // @@protoc_insertion_point(field_release:SSL_FieldCicularArc.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SSL_FieldCicularArc::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SSL_FieldCicularArc.name)
}

// required .Vector2f center = 2;
inline bool SSL_FieldCicularArc::has_center() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSL_FieldCicularArc::set_has_center() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SSL_FieldCicularArc::clear_has_center() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SSL_FieldCicularArc::clear_center() {
  if (center_ != NULL) center_->::Vector2f::Clear();
  clear_has_center();
}
inline const ::Vector2f& SSL_FieldCicularArc::center() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCicularArc.center)
  return center_ != NULL ? *center_ : *default_instance_->center_;
}
inline ::Vector2f* SSL_FieldCicularArc::mutable_center() {
  set_has_center();
  if (center_ == NULL) {
    center_ = new ::Vector2f;
  }
  // @@protoc_insertion_point(field_mutable:SSL_FieldCicularArc.center)
  return center_;
}
inline ::Vector2f* SSL_FieldCicularArc::release_center() {
  // @@protoc_insertion_point(field_release:SSL_FieldCicularArc.center)
  clear_has_center();
  ::Vector2f* temp = center_;
  center_ = NULL;
  return temp;
}
inline void SSL_FieldCicularArc::set_allocated_center(::Vector2f* center) {
  delete center_;
  center_ = center;
  if (center) {
    set_has_center();
  } else {
    clear_has_center();
  }
  // @@protoc_insertion_point(field_set_allocated:SSL_FieldCicularArc.center)
}

// required float radius = 3;
inline bool SSL_FieldCicularArc::has_radius() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SSL_FieldCicularArc::set_has_radius() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SSL_FieldCicularArc::clear_has_radius() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SSL_FieldCicularArc::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline float SSL_FieldCicularArc::radius() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCicularArc.radius)
  return radius_;
}
inline void SSL_FieldCicularArc::set_radius(float value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:SSL_FieldCicularArc.radius)
}

// required float a1 = 4;
inline bool SSL_FieldCicularArc::has_a1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SSL_FieldCicularArc::set_has_a1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SSL_FieldCicularArc::clear_has_a1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SSL_FieldCicularArc::clear_a1() {
  a1_ = 0;
  clear_has_a1();
}
inline float SSL_FieldCicularArc::a1() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCicularArc.a1)
  return a1_;
}
inline void SSL_FieldCicularArc::set_a1(float value) {
  set_has_a1();
  a1_ = value;
  // @@protoc_insertion_point(field_set:SSL_FieldCicularArc.a1)
}

// required float a2 = 5;
inline bool SSL_FieldCicularArc::has_a2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SSL_FieldCicularArc::set_has_a2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SSL_FieldCicularArc::clear_has_a2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SSL_FieldCicularArc::clear_a2() {
  a2_ = 0;
  clear_has_a2();
}
inline float SSL_FieldCicularArc::a2() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCicularArc.a2)
  return a2_;
}
inline void SSL_FieldCicularArc::set_a2(float value) {
  set_has_a2();
  a2_ = value;
  // @@protoc_insertion_point(field_set:SSL_FieldCicularArc.a2)
}

// required float thickness = 6;
inline bool SSL_FieldCicularArc::has_thickness() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SSL_FieldCicularArc::set_has_thickness() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SSL_FieldCicularArc::clear_has_thickness() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SSL_FieldCicularArc::clear_thickness() {
  thickness_ = 0;
  clear_has_thickness();
}
inline float SSL_FieldCicularArc::thickness() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCicularArc.thickness)
  return thickness_;
}
inline void SSL_FieldCicularArc::set_thickness(float value) {
  set_has_thickness();
  thickness_ = value;
  // @@protoc_insertion_point(field_set:SSL_FieldCicularArc.thickness)
}

// optional .SSL_FieldShapeType type = 7;
inline bool SSL_FieldCicularArc::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SSL_FieldCicularArc::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SSL_FieldCicularArc::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SSL_FieldCicularArc::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::SSL_FieldShapeType SSL_FieldCicularArc::type() const {
  // @@protoc_insertion_point(field_get:SSL_FieldCicularArc.type)
  return static_cast< ::SSL_FieldShapeType >(type_);
}
inline void SSL_FieldCicularArc::set_type(::SSL_FieldShapeType value) {
  assert(::SSL_FieldShapeType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:SSL_FieldCicularArc.type)
}

// -------------------------------------------------------------------

// SSL_GeometryFieldSize

// required int32 field_length = 1;
inline bool SSL_GeometryFieldSize::has_field_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_field_length() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSL_GeometryFieldSize::clear_has_field_length() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSL_GeometryFieldSize::clear_field_length() {
  field_length_ = 0;
  clear_has_field_length();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::field_length() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.field_length)
  return field_length_;
}
inline void SSL_GeometryFieldSize::set_field_length(::google::protobuf::int32 value) {
  set_has_field_length();
  field_length_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.field_length)
}

// required int32 field_width = 2;
inline bool SSL_GeometryFieldSize::has_field_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_field_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SSL_GeometryFieldSize::clear_has_field_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SSL_GeometryFieldSize::clear_field_width() {
  field_width_ = 0;
  clear_has_field_width();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::field_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.field_width)
  return field_width_;
}
inline void SSL_GeometryFieldSize::set_field_width(::google::protobuf::int32 value) {
  set_has_field_width();
  field_width_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.field_width)
}

// required int32 goal_width = 3;
inline bool SSL_GeometryFieldSize::has_goal_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_goal_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SSL_GeometryFieldSize::clear_has_goal_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SSL_GeometryFieldSize::clear_goal_width() {
  goal_width_ = 0;
  clear_has_goal_width();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::goal_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.goal_width)
  return goal_width_;
}
inline void SSL_GeometryFieldSize::set_goal_width(::google::protobuf::int32 value) {
  set_has_goal_width();
  goal_width_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.goal_width)
}

// required int32 goal_depth = 4;
inline bool SSL_GeometryFieldSize::has_goal_depth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_goal_depth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SSL_GeometryFieldSize::clear_has_goal_depth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SSL_GeometryFieldSize::clear_goal_depth() {
  goal_depth_ = 0;
  clear_has_goal_depth();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::goal_depth() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.goal_depth)
  return goal_depth_;
}
inline void SSL_GeometryFieldSize::set_goal_depth(::google::protobuf::int32 value) {
  set_has_goal_depth();
  goal_depth_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.goal_depth)
}

// required int32 boundary_width = 5;
inline bool SSL_GeometryFieldSize::has_boundary_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_boundary_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SSL_GeometryFieldSize::clear_has_boundary_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SSL_GeometryFieldSize::clear_boundary_width() {
  boundary_width_ = 0;
  clear_has_boundary_width();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::boundary_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.boundary_width)
  return boundary_width_;
}
inline void SSL_GeometryFieldSize::set_boundary_width(::google::protobuf::int32 value) {
  set_has_boundary_width();
  boundary_width_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.boundary_width)
}

// repeated .SSL_FieldLineSegment field_lines = 6;
inline int SSL_GeometryFieldSize::field_lines_size() const {
  return field_lines_.size();
}
inline void SSL_GeometryFieldSize::clear_field_lines() {
  field_lines_.Clear();
}
inline const ::SSL_FieldLineSegment& SSL_GeometryFieldSize::field_lines(int index) const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.field_lines)
  return field_lines_.Get(index);
}
inline ::SSL_FieldLineSegment* SSL_GeometryFieldSize::mutable_field_lines(int index) {
  // @@protoc_insertion_point(field_mutable:SSL_GeometryFieldSize.field_lines)
  return field_lines_.Mutable(index);
}
inline ::SSL_FieldLineSegment* SSL_GeometryFieldSize::add_field_lines() {
  // @@protoc_insertion_point(field_add:SSL_GeometryFieldSize.field_lines)
  return field_lines_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::SSL_FieldLineSegment >*
SSL_GeometryFieldSize::mutable_field_lines() {
  // @@protoc_insertion_point(field_mutable_list:SSL_GeometryFieldSize.field_lines)
  return &field_lines_;
}
inline const ::google::protobuf::RepeatedPtrField< ::SSL_FieldLineSegment >&
SSL_GeometryFieldSize::field_lines() const {
  // @@protoc_insertion_point(field_list:SSL_GeometryFieldSize.field_lines)
  return field_lines_;
}

// repeated .SSL_FieldCicularArc field_arcs = 7;
inline int SSL_GeometryFieldSize::field_arcs_size() const {
  return field_arcs_.size();
}
inline void SSL_GeometryFieldSize::clear_field_arcs() {
  field_arcs_.Clear();
}
inline const ::SSL_FieldCicularArc& SSL_GeometryFieldSize::field_arcs(int index) const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.field_arcs)
  return field_arcs_.Get(index);
}
inline ::SSL_FieldCicularArc* SSL_GeometryFieldSize::mutable_field_arcs(int index) {
  // @@protoc_insertion_point(field_mutable:SSL_GeometryFieldSize.field_arcs)
  return field_arcs_.Mutable(index);
}
inline ::SSL_FieldCicularArc* SSL_GeometryFieldSize::add_field_arcs() {
  // @@protoc_insertion_point(field_add:SSL_GeometryFieldSize.field_arcs)
  return field_arcs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::SSL_FieldCicularArc >*
SSL_GeometryFieldSize::mutable_field_arcs() {
  // @@protoc_insertion_point(field_mutable_list:SSL_GeometryFieldSize.field_arcs)
  return &field_arcs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::SSL_FieldCicularArc >&
SSL_GeometryFieldSize::field_arcs() const {
  // @@protoc_insertion_point(field_list:SSL_GeometryFieldSize.field_arcs)
  return field_arcs_;
}

// optional int32 penalty_area_depth = 8;
inline bool SSL_GeometryFieldSize::has_penalty_area_depth() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_penalty_area_depth() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SSL_GeometryFieldSize::clear_has_penalty_area_depth() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SSL_GeometryFieldSize::clear_penalty_area_depth() {
  penalty_area_depth_ = 0;
  clear_has_penalty_area_depth();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::penalty_area_depth() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.penalty_area_depth)
  return penalty_area_depth_;
}
inline void SSL_GeometryFieldSize::set_penalty_area_depth(::google::protobuf::int32 value) {
  set_has_penalty_area_depth();
  penalty_area_depth_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.penalty_area_depth)
}

// optional int32 penalty_area_width = 9;
inline bool SSL_GeometryFieldSize::has_penalty_area_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_penalty_area_width() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SSL_GeometryFieldSize::clear_has_penalty_area_width() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SSL_GeometryFieldSize::clear_penalty_area_width() {
  penalty_area_width_ = 0;
  clear_has_penalty_area_width();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::penalty_area_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.penalty_area_width)
  return penalty_area_width_;
}
inline void SSL_GeometryFieldSize::set_penalty_area_width(::google::protobuf::int32 value) {
  set_has_penalty_area_width();
  penalty_area_width_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.penalty_area_width)
}

// -------------------------------------------------------------------

// SSL_GeometryCameraCalibration

// required uint32 camera_id = 1;
inline bool SSL_GeometryCameraCalibration::has_camera_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSL_GeometryCameraCalibration::set_has_camera_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSL_GeometryCameraCalibration::clear_has_camera_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSL_GeometryCameraCalibration::clear_camera_id() {
  camera_id_ = 0u;
  clear_has_camera_id();
}
inline ::google::protobuf::uint32 SSL_GeometryCameraCalibration::camera_id() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.camera_id)
  return camera_id_;
}
inline void SSL_GeometryCameraCalibration::set_camera_id(::google::protobuf::uint32 value) {
  set_has_camera_id();
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.camera_id)
}

// required float focal_length = 2;
inline bool SSL_GeometryCameraCalibration::has_focal_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSL_GeometryCameraCalibration::set_has_focal_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SSL_GeometryCameraCalibration::clear_has_focal_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SSL_GeometryCameraCalibration::clear_focal_length() {
  focal_length_ = 0;
  clear_has_focal_length();
}
inline float SSL_GeometryCameraCalibration::focal_length() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.focal_length)
  return focal_length_;
}
inline void SSL_GeometryCameraCalibration::set_focal_length(float value) {
  set_has_focal_length();
  focal_length_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.focal_length)
}

// required float principal_point_x = 3;
inline bool SSL_GeometryCameraCalibration::has_principal_point_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SSL_GeometryCameraCalibration::set_has_principal_point_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SSL_GeometryCameraCalibration::clear_has_principal_point_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SSL_GeometryCameraCalibration::clear_principal_point_x() {
  principal_point_x_ = 0;
  clear_has_principal_point_x();
}
inline float SSL_GeometryCameraCalibration::principal_point_x() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.principal_point_x)
  return principal_point_x_;
}
inline void SSL_GeometryCameraCalibration::set_principal_point_x(float value) {
  set_has_principal_point_x();
  principal_point_x_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.principal_point_x)
}

// required float principal_point_y = 4;
inline bool SSL_GeometryCameraCalibration::has_principal_point_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SSL_GeometryCameraCalibration::set_has_principal_point_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SSL_GeometryCameraCalibration::clear_has_principal_point_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SSL_GeometryCameraCalibration::clear_principal_point_y() {
  principal_point_y_ = 0;
  clear_has_principal_point_y();
}
inline float SSL_GeometryCameraCalibration::principal_point_y() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.principal_point_y)
  return principal_point_y_;
}
inline void SSL_GeometryCameraCalibration::set_principal_point_y(float value) {
  set_has_principal_point_y();
  principal_point_y_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.principal_point_y)
}

// required float distortion = 5;
inline bool SSL_GeometryCameraCalibration::has_distortion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SSL_GeometryCameraCalibration::set_has_distortion() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SSL_GeometryCameraCalibration::clear_has_distortion() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SSL_GeometryCameraCalibration::clear_distortion() {
  distortion_ = 0;
  clear_has_distortion();
}
inline float SSL_GeometryCameraCalibration::distortion() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.distortion)
  return distortion_;
}
inline void SSL_GeometryCameraCalibration::set_distortion(float value) {
  set_has_distortion();
  distortion_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.distortion)
}

// required float q0 = 6;
inline bool SSL_GeometryCameraCalibration::has_q0() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SSL_GeometryCameraCalibration::set_has_q0() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SSL_GeometryCameraCalibration::clear_has_q0() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SSL_GeometryCameraCalibration::clear_q0() {
  q0_ = 0;
  clear_has_q0();
}
inline float SSL_GeometryCameraCalibration::q0() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q0)
  return q0_;
}
inline void SSL_GeometryCameraCalibration::set_q0(float value) {
  set_has_q0();
  q0_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q0)
}

// required float q1 = 7;
inline bool SSL_GeometryCameraCalibration::has_q1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SSL_GeometryCameraCalibration::set_has_q1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SSL_GeometryCameraCalibration::clear_has_q1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SSL_GeometryCameraCalibration::clear_q1() {
  q1_ = 0;
  clear_has_q1();
}
inline float SSL_GeometryCameraCalibration::q1() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q1)
  return q1_;
}
inline void SSL_GeometryCameraCalibration::set_q1(float value) {
  set_has_q1();
  q1_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q1)
}

// required float q2 = 8;
inline bool SSL_GeometryCameraCalibration::has_q2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SSL_GeometryCameraCalibration::set_has_q2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SSL_GeometryCameraCalibration::clear_has_q2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SSL_GeometryCameraCalibration::clear_q2() {
  q2_ = 0;
  clear_has_q2();
}
inline float SSL_GeometryCameraCalibration::q2() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q2)
  return q2_;
}
inline void SSL_GeometryCameraCalibration::set_q2(float value) {
  set_has_q2();
  q2_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q2)
}

// required float q3 = 9;
inline bool SSL_GeometryCameraCalibration::has_q3() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SSL_GeometryCameraCalibration::set_has_q3() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SSL_GeometryCameraCalibration::clear_has_q3() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SSL_GeometryCameraCalibration::clear_q3() {
  q3_ = 0;
  clear_has_q3();
}
inline float SSL_GeometryCameraCalibration::q3() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q3)
  return q3_;
}
inline void SSL_GeometryCameraCalibration::set_q3(float value) {
  set_has_q3();
  q3_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q3)
}

// required float tx = 10;
inline bool SSL_GeometryCameraCalibration::has_tx() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SSL_GeometryCameraCalibration::set_has_tx() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SSL_GeometryCameraCalibration::clear_has_tx() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SSL_GeometryCameraCalibration::clear_tx() {
  tx_ = 0;
  clear_has_tx();
}
inline float SSL_GeometryCameraCalibration::tx() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.tx)
  return tx_;
}
inline void SSL_GeometryCameraCalibration::set_tx(float value) {
  set_has_tx();
  tx_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.tx)
}

// required float ty = 11;
inline bool SSL_GeometryCameraCalibration::has_ty() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SSL_GeometryCameraCalibration::set_has_ty() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SSL_GeometryCameraCalibration::clear_has_ty() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SSL_GeometryCameraCalibration::clear_ty() {
  ty_ = 0;
  clear_has_ty();
}
inline float SSL_GeometryCameraCalibration::ty() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.ty)
  return ty_;
}
inline void SSL_GeometryCameraCalibration::set_ty(float value) {
  set_has_ty();
  ty_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.ty)
}

// required float tz = 12;
inline bool SSL_GeometryCameraCalibration::has_tz() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SSL_GeometryCameraCalibration::set_has_tz() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SSL_GeometryCameraCalibration::clear_has_tz() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SSL_GeometryCameraCalibration::clear_tz() {
  tz_ = 0;
  clear_has_tz();
}
inline float SSL_GeometryCameraCalibration::tz() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.tz)
  return tz_;
}
inline void SSL_GeometryCameraCalibration::set_tz(float value) {
  set_has_tz();
  tz_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.tz)
}

// optional float derived_camera_world_tx = 13;
inline bool SSL_GeometryCameraCalibration::has_derived_camera_world_tx() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SSL_GeometryCameraCalibration::set_has_derived_camera_world_tx() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SSL_GeometryCameraCalibration::clear_has_derived_camera_world_tx() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SSL_GeometryCameraCalibration::clear_derived_camera_world_tx() {
  derived_camera_world_tx_ = 0;
  clear_has_derived_camera_world_tx();
}
inline float SSL_GeometryCameraCalibration::derived_camera_world_tx() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.derived_camera_world_tx)
  return derived_camera_world_tx_;
}
inline void SSL_GeometryCameraCalibration::set_derived_camera_world_tx(float value) {
  set_has_derived_camera_world_tx();
  derived_camera_world_tx_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.derived_camera_world_tx)
}

// optional float derived_camera_world_ty = 14;
inline bool SSL_GeometryCameraCalibration::has_derived_camera_world_ty() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SSL_GeometryCameraCalibration::set_has_derived_camera_world_ty() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SSL_GeometryCameraCalibration::clear_has_derived_camera_world_ty() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SSL_GeometryCameraCalibration::clear_derived_camera_world_ty() {
  derived_camera_world_ty_ = 0;
  clear_has_derived_camera_world_ty();
}
inline float SSL_GeometryCameraCalibration::derived_camera_world_ty() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.derived_camera_world_ty)
  return derived_camera_world_ty_;
}
inline void SSL_GeometryCameraCalibration::set_derived_camera_world_ty(float value) {
  set_has_derived_camera_world_ty();
  derived_camera_world_ty_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.derived_camera_world_ty)
}

// optional float derived_camera_world_tz = 15;
inline bool SSL_GeometryCameraCalibration::has_derived_camera_world_tz() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SSL_GeometryCameraCalibration::set_has_derived_camera_world_tz() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SSL_GeometryCameraCalibration::clear_has_derived_camera_world_tz() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SSL_GeometryCameraCalibration::clear_derived_camera_world_tz() {
  derived_camera_world_tz_ = 0;
  clear_has_derived_camera_world_tz();
}
inline float SSL_GeometryCameraCalibration::derived_camera_world_tz() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.derived_camera_world_tz)
  return derived_camera_world_tz_;
}
inline void SSL_GeometryCameraCalibration::set_derived_camera_world_tz(float value) {
  set_has_derived_camera_world_tz();
  derived_camera_world_tz_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.derived_camera_world_tz)
}

// -------------------------------------------------------------------

// SSL_GeometryData

// required .SSL_GeometryFieldSize field = 1;
inline bool SSL_GeometryData::has_field() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSL_GeometryData::set_has_field() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSL_GeometryData::clear_has_field() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSL_GeometryData::clear_field() {
  if (field_ != NULL) field_->::SSL_GeometryFieldSize::Clear();
  clear_has_field();
}
inline const ::SSL_GeometryFieldSize& SSL_GeometryData::field() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryData.field)
  return field_ != NULL ? *field_ : *default_instance_->field_;
}
inline ::SSL_GeometryFieldSize* SSL_GeometryData::mutable_field() {
  set_has_field();
  if (field_ == NULL) {
    field_ = new ::SSL_GeometryFieldSize;
  }
  // @@protoc_insertion_point(field_mutable:SSL_GeometryData.field)
  return field_;
}
inline ::SSL_GeometryFieldSize* SSL_GeometryData::release_field() {
  // @@protoc_insertion_point(field_release:SSL_GeometryData.field)
  clear_has_field();
  ::SSL_GeometryFieldSize* temp = field_;
  field_ = NULL;
  return temp;
}
inline void SSL_GeometryData::set_allocated_field(::SSL_GeometryFieldSize* field) {
  delete field_;
  field_ = field;
  if (field) {
    set_has_field();
  } else {
    clear_has_field();
  }
  // @@protoc_insertion_point(field_set_allocated:SSL_GeometryData.field)
}

// repeated .SSL_GeometryCameraCalibration calib = 2;
inline int SSL_GeometryData::calib_size() const {
  return calib_.size();
}
inline void SSL_GeometryData::clear_calib() {
  calib_.Clear();
}
inline const ::SSL_GeometryCameraCalibration& SSL_GeometryData::calib(int index) const {
  // @@protoc_insertion_point(field_get:SSL_GeometryData.calib)
  return calib_.Get(index);
}
inline ::SSL_GeometryCameraCalibration* SSL_GeometryData::mutable_calib(int index) {
  // @@protoc_insertion_point(field_mutable:SSL_GeometryData.calib)
  return calib_.Mutable(index);
}
inline ::SSL_GeometryCameraCalibration* SSL_GeometryData::add_calib() {
  // @@protoc_insertion_point(field_add:SSL_GeometryData.calib)
  return calib_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::SSL_GeometryCameraCalibration >*
SSL_GeometryData::mutable_calib() {
  // @@protoc_insertion_point(field_mutable_list:SSL_GeometryData.calib)
  return &calib_;
}
inline const ::google::protobuf::RepeatedPtrField< ::SSL_GeometryCameraCalibration >&
SSL_GeometryData::calib() const {
  // @@protoc_insertion_point(field_list:SSL_GeometryData.calib)
  return calib_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::SSL_FieldShapeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SSL_FieldShapeType>() {
  return ::SSL_FieldShapeType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_5frobocup_5fssl_5fgeometry_2eproto__INCLUDED
