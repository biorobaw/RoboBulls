// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_robocup_ssl_detection_tracked.proto

#ifndef PROTOBUF_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto__INCLUDED
#define PROTOBUF_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto();
void protobuf_AssignDesc_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto();
void protobuf_ShutdownFile_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto();

class KickedBall;
class RobotId;
class TrackedBall;
class TrackedFrame;
class TrackedRobot;
class Vector2;
class Vector3;

enum TeamColor {
  TEAM_COLOR_UNKNOWN = 0,
  TEAM_COLOR_YELLOW = 1,
  TEAM_COLOR_BLUE = 2
};
bool TeamColor_IsValid(int value);
const TeamColor TeamColor_MIN = TEAM_COLOR_UNKNOWN;
const TeamColor TeamColor_MAX = TEAM_COLOR_BLUE;
const int TeamColor_ARRAYSIZE = TeamColor_MAX + 1;

const ::google::protobuf::EnumDescriptor* TeamColor_descriptor();
inline const ::std::string& TeamColor_Name(TeamColor value) {
  return ::google::protobuf::internal::NameOfEnum(
    TeamColor_descriptor(), value);
}
inline bool TeamColor_Parse(
    const ::std::string& name, TeamColor* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TeamColor>(
    TeamColor_descriptor(), name, value);
}
enum Capability {
  CAPABILITY_UNKNOWN = 0,
  CAPABILITY_DETECT_FLYING_BALLS = 1,
  CAPABILITY_DETECT_MULTIPLE_BALLS = 2,
  CAPABILITY_DETECT_KICKED_BALLS = 3
};
bool Capability_IsValid(int value);
const Capability Capability_MIN = CAPABILITY_UNKNOWN;
const Capability Capability_MAX = CAPABILITY_DETECT_KICKED_BALLS;
const int Capability_ARRAYSIZE = Capability_MAX + 1;

const ::google::protobuf::EnumDescriptor* Capability_descriptor();
inline const ::std::string& Capability_Name(Capability value) {
  return ::google::protobuf::internal::NameOfEnum(
    Capability_descriptor(), value);
}
inline bool Capability_Parse(
    const ::std::string& name, Capability* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Capability>(
    Capability_descriptor(), name, value);
}
// ===================================================================

class Vector2 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Vector2) */ {
 public:
  Vector2();
  virtual ~Vector2();

  Vector2(const Vector2& from);

  inline Vector2& operator=(const Vector2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector2& default_instance();

  void Swap(Vector2* other);

  // implements Message ----------------------------------------------

  inline Vector2* New() const { return New(NULL); }

  Vector2* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector2& from);
  void MergeFrom(const Vector2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vector2* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:Vector2)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  friend void  protobuf_AddDesc_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto();
  friend void protobuf_AssignDesc_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto();
  friend void protobuf_ShutdownFile_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto();

  void InitAsDefaultInstance();
  static Vector2* default_instance_;
};
// -------------------------------------------------------------------

class Vector3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Vector3) */ {
 public:
  Vector3();
  virtual ~Vector3();

  Vector3(const Vector3& from);

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3& default_instance();

  void Swap(Vector3* other);

  // implements Message ----------------------------------------------

  inline Vector3* New() const { return New(NULL); }

  Vector3* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector3& from);
  void MergeFrom(const Vector3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Vector3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // required float z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:Vector3)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  friend void  protobuf_AddDesc_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto();
  friend void protobuf_AssignDesc_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto();
  friend void protobuf_ShutdownFile_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto();

  void InitAsDefaultInstance();
  static Vector3* default_instance_;
};
// -------------------------------------------------------------------

class RobotId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RobotId) */ {
 public:
  RobotId();
  virtual ~RobotId();

  RobotId(const RobotId& from);

  inline RobotId& operator=(const RobotId& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotId& default_instance();

  void Swap(RobotId* other);

  // implements Message ----------------------------------------------

  inline RobotId* New() const { return New(NULL); }

  RobotId* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobotId& from);
  void MergeFrom(const RobotId& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RobotId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // required .TeamColor team_color = 2;
  bool has_team_color() const;
  void clear_team_color();
  static const int kTeamColorFieldNumber = 2;
  ::TeamColor team_color() const;
  void set_team_color(::TeamColor value);

  // @@protoc_insertion_point(class_scope:RobotId)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_team_color();
  inline void clear_has_team_color();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  int team_color_;
  friend void  protobuf_AddDesc_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto();
  friend void protobuf_AssignDesc_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto();
  friend void protobuf_ShutdownFile_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto();

  void InitAsDefaultInstance();
  static RobotId* default_instance_;
};
// -------------------------------------------------------------------

class TrackedBall : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TrackedBall) */ {
 public:
  TrackedBall();
  virtual ~TrackedBall();

  TrackedBall(const TrackedBall& from);

  inline TrackedBall& operator=(const TrackedBall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackedBall& default_instance();

  void Swap(TrackedBall* other);

  // implements Message ----------------------------------------------

  inline TrackedBall* New() const { return New(NULL); }

  TrackedBall* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackedBall& from);
  void MergeFrom(const TrackedBall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrackedBall* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Vector3 pos = 1;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 1;
  const ::Vector3& pos() const;
  ::Vector3* mutable_pos();
  ::Vector3* release_pos();
  void set_allocated_pos(::Vector3* pos);

  // optional .Vector3 vel = 2;
  bool has_vel() const;
  void clear_vel();
  static const int kVelFieldNumber = 2;
  const ::Vector3& vel() const;
  ::Vector3* mutable_vel();
  ::Vector3* release_vel();
  void set_allocated_vel(::Vector3* vel);

  // optional float visibility = 3;
  bool has_visibility() const;
  void clear_visibility();
  static const int kVisibilityFieldNumber = 3;
  float visibility() const;
  void set_visibility(float value);

  // @@protoc_insertion_point(class_scope:TrackedBall)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_vel();
  inline void clear_has_vel();
  inline void set_has_visibility();
  inline void clear_has_visibility();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Vector3* pos_;
  ::Vector3* vel_;
  float visibility_;
  friend void  protobuf_AddDesc_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto();
  friend void protobuf_AssignDesc_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto();
  friend void protobuf_ShutdownFile_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto();

  void InitAsDefaultInstance();
  static TrackedBall* default_instance_;
};
// -------------------------------------------------------------------

class KickedBall : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:KickedBall) */ {
 public:
  KickedBall();
  virtual ~KickedBall();

  KickedBall(const KickedBall& from);

  inline KickedBall& operator=(const KickedBall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KickedBall& default_instance();

  void Swap(KickedBall* other);

  // implements Message ----------------------------------------------

  inline KickedBall* New() const { return New(NULL); }

  KickedBall* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KickedBall& from);
  void MergeFrom(const KickedBall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KickedBall* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .Vector2 pos = 1;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 1;
  const ::Vector2& pos() const;
  ::Vector2* mutable_pos();
  ::Vector2* release_pos();
  void set_allocated_pos(::Vector2* pos);

  // required .Vector3 vel = 2;
  bool has_vel() const;
  void clear_vel();
  static const int kVelFieldNumber = 2;
  const ::Vector3& vel() const;
  ::Vector3* mutable_vel();
  ::Vector3* release_vel();
  void set_allocated_vel(::Vector3* vel);

  // required double start_timestamp = 3;
  bool has_start_timestamp() const;
  void clear_start_timestamp();
  static const int kStartTimestampFieldNumber = 3;
  double start_timestamp() const;
  void set_start_timestamp(double value);

  // optional double stop_timestamp = 4;
  bool has_stop_timestamp() const;
  void clear_stop_timestamp();
  static const int kStopTimestampFieldNumber = 4;
  double stop_timestamp() const;
  void set_stop_timestamp(double value);

  // optional .Vector2 stop_pos = 5;
  bool has_stop_pos() const;
  void clear_stop_pos();
  static const int kStopPosFieldNumber = 5;
  const ::Vector2& stop_pos() const;
  ::Vector2* mutable_stop_pos();
  ::Vector2* release_stop_pos();
  void set_allocated_stop_pos(::Vector2* stop_pos);

  // optional .RobotId robot_id = 6;
  bool has_robot_id() const;
  void clear_robot_id();
  static const int kRobotIdFieldNumber = 6;
  const ::RobotId& robot_id() const;
  ::RobotId* mutable_robot_id();
  ::RobotId* release_robot_id();
  void set_allocated_robot_id(::RobotId* robot_id);

  // @@protoc_insertion_point(class_scope:KickedBall)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_vel();
  inline void clear_has_vel();
  inline void set_has_start_timestamp();
  inline void clear_has_start_timestamp();
  inline void set_has_stop_timestamp();
  inline void clear_has_stop_timestamp();
  inline void set_has_stop_pos();
  inline void clear_has_stop_pos();
  inline void set_has_robot_id();
  inline void clear_has_robot_id();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Vector2* pos_;
  ::Vector3* vel_;
  double start_timestamp_;
  double stop_timestamp_;
  ::Vector2* stop_pos_;
  ::RobotId* robot_id_;
  friend void  protobuf_AddDesc_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto();
  friend void protobuf_AssignDesc_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto();
  friend void protobuf_ShutdownFile_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto();

  void InitAsDefaultInstance();
  static KickedBall* default_instance_;
};
// -------------------------------------------------------------------

class TrackedRobot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TrackedRobot) */ {
 public:
  TrackedRobot();
  virtual ~TrackedRobot();

  TrackedRobot(const TrackedRobot& from);

  inline TrackedRobot& operator=(const TrackedRobot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackedRobot& default_instance();

  void Swap(TrackedRobot* other);

  // implements Message ----------------------------------------------

  inline TrackedRobot* New() const { return New(NULL); }

  TrackedRobot* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackedRobot& from);
  void MergeFrom(const TrackedRobot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrackedRobot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .RobotId robot_id = 1;
  bool has_robot_id() const;
  void clear_robot_id();
  static const int kRobotIdFieldNumber = 1;
  const ::RobotId& robot_id() const;
  ::RobotId* mutable_robot_id();
  ::RobotId* release_robot_id();
  void set_allocated_robot_id(::RobotId* robot_id);

  // required .Vector2 pos = 2;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 2;
  const ::Vector2& pos() const;
  ::Vector2* mutable_pos();
  ::Vector2* release_pos();
  void set_allocated_pos(::Vector2* pos);

  // required float orientation = 3;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 3;
  float orientation() const;
  void set_orientation(float value);

  // optional .Vector2 vel = 4;
  bool has_vel() const;
  void clear_vel();
  static const int kVelFieldNumber = 4;
  const ::Vector2& vel() const;
  ::Vector2* mutable_vel();
  ::Vector2* release_vel();
  void set_allocated_vel(::Vector2* vel);

  // optional float vel_angular = 5;
  bool has_vel_angular() const;
  void clear_vel_angular();
  static const int kVelAngularFieldNumber = 5;
  float vel_angular() const;
  void set_vel_angular(float value);

  // optional float visibility = 6;
  bool has_visibility() const;
  void clear_visibility();
  static const int kVisibilityFieldNumber = 6;
  float visibility() const;
  void set_visibility(float value);

  // @@protoc_insertion_point(class_scope:TrackedRobot)
 private:
  inline void set_has_robot_id();
  inline void clear_has_robot_id();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_orientation();
  inline void clear_has_orientation();
  inline void set_has_vel();
  inline void clear_has_vel();
  inline void set_has_vel_angular();
  inline void clear_has_vel_angular();
  inline void set_has_visibility();
  inline void clear_has_visibility();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RobotId* robot_id_;
  ::Vector2* pos_;
  ::Vector2* vel_;
  float orientation_;
  float vel_angular_;
  float visibility_;
  friend void  protobuf_AddDesc_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto();
  friend void protobuf_AssignDesc_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto();
  friend void protobuf_ShutdownFile_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto();

  void InitAsDefaultInstance();
  static TrackedRobot* default_instance_;
};
// -------------------------------------------------------------------

class TrackedFrame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TrackedFrame) */ {
 public:
  TrackedFrame();
  virtual ~TrackedFrame();

  TrackedFrame(const TrackedFrame& from);

  inline TrackedFrame& operator=(const TrackedFrame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackedFrame& default_instance();

  void Swap(TrackedFrame* other);

  // implements Message ----------------------------------------------

  inline TrackedFrame* New() const { return New(NULL); }

  TrackedFrame* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackedFrame& from);
  void MergeFrom(const TrackedFrame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrackedFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 frame_number = 1;
  bool has_frame_number() const;
  void clear_frame_number();
  static const int kFrameNumberFieldNumber = 1;
  ::google::protobuf::uint32 frame_number() const;
  void set_frame_number(::google::protobuf::uint32 value);

  // required double timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  double timestamp() const;
  void set_timestamp(double value);

  // repeated .TrackedBall balls = 3;
  int balls_size() const;
  void clear_balls();
  static const int kBallsFieldNumber = 3;
  const ::TrackedBall& balls(int index) const;
  ::TrackedBall* mutable_balls(int index);
  ::TrackedBall* add_balls();
  ::google::protobuf::RepeatedPtrField< ::TrackedBall >*
      mutable_balls();
  const ::google::protobuf::RepeatedPtrField< ::TrackedBall >&
      balls() const;

  // repeated .TrackedRobot robots = 4;
  int robots_size() const;
  void clear_robots();
  static const int kRobotsFieldNumber = 4;
  const ::TrackedRobot& robots(int index) const;
  ::TrackedRobot* mutable_robots(int index);
  ::TrackedRobot* add_robots();
  ::google::protobuf::RepeatedPtrField< ::TrackedRobot >*
      mutable_robots();
  const ::google::protobuf::RepeatedPtrField< ::TrackedRobot >&
      robots() const;

  // optional .KickedBall kicked_ball = 5;
  bool has_kicked_ball() const;
  void clear_kicked_ball();
  static const int kKickedBallFieldNumber = 5;
  const ::KickedBall& kicked_ball() const;
  ::KickedBall* mutable_kicked_ball();
  ::KickedBall* release_kicked_ball();
  void set_allocated_kicked_ball(::KickedBall* kicked_ball);

  // repeated .Capability capabilities = 6;
  int capabilities_size() const;
  void clear_capabilities();
  static const int kCapabilitiesFieldNumber = 6;
  ::Capability capabilities(int index) const;
  void set_capabilities(int index, ::Capability value);
  void add_capabilities(::Capability value);
  const ::google::protobuf::RepeatedField<int>& capabilities() const;
  ::google::protobuf::RepeatedField<int>* mutable_capabilities();

  // @@protoc_insertion_point(class_scope:TrackedFrame)
 private:
  inline void set_has_frame_number();
  inline void clear_has_frame_number();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_kicked_ball();
  inline void clear_has_kicked_ball();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double timestamp_;
  ::google::protobuf::RepeatedPtrField< ::TrackedBall > balls_;
  ::google::protobuf::RepeatedPtrField< ::TrackedRobot > robots_;
  ::KickedBall* kicked_ball_;
  ::google::protobuf::RepeatedField<int> capabilities_;
  ::google::protobuf::uint32 frame_number_;
  friend void  protobuf_AddDesc_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto();
  friend void protobuf_AssignDesc_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto();
  friend void protobuf_ShutdownFile_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto();

  void InitAsDefaultInstance();
  static TrackedFrame* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector2

// required float x = 1;
inline bool Vector2::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector2::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector2::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector2::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vector2::x() const {
  // @@protoc_insertion_point(field_get:Vector2.x)
  return x_;
}
inline void Vector2::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Vector2.x)
}

// required float y = 2;
inline bool Vector2::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector2::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector2::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector2::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vector2::y() const {
  // @@protoc_insertion_point(field_get:Vector2.y)
  return y_;
}
inline void Vector2::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Vector2.y)
}

// -------------------------------------------------------------------

// Vector3

// required float x = 1;
inline bool Vector3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector3::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:Vector3.x)
  return x_;
}
inline void Vector3::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Vector3.x)
}

// required float y = 2;
inline bool Vector3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector3::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:Vector3.y)
  return y_;
}
inline void Vector3::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Vector3.y)
}

// required float z = 3;
inline bool Vector3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector3::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:Vector3.z)
  return z_;
}
inline void Vector3::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:Vector3.z)
}

// -------------------------------------------------------------------

// RobotId

// required uint32 id = 1;
inline bool RobotId::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotId::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotId::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotId::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 RobotId::id() const {
  // @@protoc_insertion_point(field_get:RobotId.id)
  return id_;
}
inline void RobotId::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:RobotId.id)
}

// required .TeamColor team_color = 2;
inline bool RobotId::has_team_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotId::set_has_team_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotId::clear_has_team_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobotId::clear_team_color() {
  team_color_ = 0;
  clear_has_team_color();
}
inline ::TeamColor RobotId::team_color() const {
  // @@protoc_insertion_point(field_get:RobotId.team_color)
  return static_cast< ::TeamColor >(team_color_);
}
inline void RobotId::set_team_color(::TeamColor value) {
  assert(::TeamColor_IsValid(value));
  set_has_team_color();
  team_color_ = value;
  // @@protoc_insertion_point(field_set:RobotId.team_color)
}

// -------------------------------------------------------------------

// TrackedBall

// required .Vector3 pos = 1;
inline bool TrackedBall::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackedBall::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrackedBall::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrackedBall::clear_pos() {
  if (pos_ != NULL) pos_->::Vector3::Clear();
  clear_has_pos();
}
inline const ::Vector3& TrackedBall::pos() const {
  // @@protoc_insertion_point(field_get:TrackedBall.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Vector3* TrackedBall::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:TrackedBall.pos)
  return pos_;
}
inline ::Vector3* TrackedBall::release_pos() {
  // @@protoc_insertion_point(field_release:TrackedBall.pos)
  clear_has_pos();
  ::Vector3* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void TrackedBall::set_allocated_pos(::Vector3* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:TrackedBall.pos)
}

// optional .Vector3 vel = 2;
inline bool TrackedBall::has_vel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackedBall::set_has_vel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrackedBall::clear_has_vel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrackedBall::clear_vel() {
  if (vel_ != NULL) vel_->::Vector3::Clear();
  clear_has_vel();
}
inline const ::Vector3& TrackedBall::vel() const {
  // @@protoc_insertion_point(field_get:TrackedBall.vel)
  return vel_ != NULL ? *vel_ : *default_instance_->vel_;
}
inline ::Vector3* TrackedBall::mutable_vel() {
  set_has_vel();
  if (vel_ == NULL) {
    vel_ = new ::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:TrackedBall.vel)
  return vel_;
}
inline ::Vector3* TrackedBall::release_vel() {
  // @@protoc_insertion_point(field_release:TrackedBall.vel)
  clear_has_vel();
  ::Vector3* temp = vel_;
  vel_ = NULL;
  return temp;
}
inline void TrackedBall::set_allocated_vel(::Vector3* vel) {
  delete vel_;
  vel_ = vel;
  if (vel) {
    set_has_vel();
  } else {
    clear_has_vel();
  }
  // @@protoc_insertion_point(field_set_allocated:TrackedBall.vel)
}

// optional float visibility = 3;
inline bool TrackedBall::has_visibility() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrackedBall::set_has_visibility() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrackedBall::clear_has_visibility() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrackedBall::clear_visibility() {
  visibility_ = 0;
  clear_has_visibility();
}
inline float TrackedBall::visibility() const {
  // @@protoc_insertion_point(field_get:TrackedBall.visibility)
  return visibility_;
}
inline void TrackedBall::set_visibility(float value) {
  set_has_visibility();
  visibility_ = value;
  // @@protoc_insertion_point(field_set:TrackedBall.visibility)
}

// -------------------------------------------------------------------

// KickedBall

// required .Vector2 pos = 1;
inline bool KickedBall::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KickedBall::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KickedBall::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KickedBall::clear_pos() {
  if (pos_ != NULL) pos_->::Vector2::Clear();
  clear_has_pos();
}
inline const ::Vector2& KickedBall::pos() const {
  // @@protoc_insertion_point(field_get:KickedBall.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Vector2* KickedBall::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::Vector2;
  }
  // @@protoc_insertion_point(field_mutable:KickedBall.pos)
  return pos_;
}
inline ::Vector2* KickedBall::release_pos() {
  // @@protoc_insertion_point(field_release:KickedBall.pos)
  clear_has_pos();
  ::Vector2* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void KickedBall::set_allocated_pos(::Vector2* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:KickedBall.pos)
}

// required .Vector3 vel = 2;
inline bool KickedBall::has_vel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KickedBall::set_has_vel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KickedBall::clear_has_vel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KickedBall::clear_vel() {
  if (vel_ != NULL) vel_->::Vector3::Clear();
  clear_has_vel();
}
inline const ::Vector3& KickedBall::vel() const {
  // @@protoc_insertion_point(field_get:KickedBall.vel)
  return vel_ != NULL ? *vel_ : *default_instance_->vel_;
}
inline ::Vector3* KickedBall::mutable_vel() {
  set_has_vel();
  if (vel_ == NULL) {
    vel_ = new ::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:KickedBall.vel)
  return vel_;
}
inline ::Vector3* KickedBall::release_vel() {
  // @@protoc_insertion_point(field_release:KickedBall.vel)
  clear_has_vel();
  ::Vector3* temp = vel_;
  vel_ = NULL;
  return temp;
}
inline void KickedBall::set_allocated_vel(::Vector3* vel) {
  delete vel_;
  vel_ = vel;
  if (vel) {
    set_has_vel();
  } else {
    clear_has_vel();
  }
  // @@protoc_insertion_point(field_set_allocated:KickedBall.vel)
}

// required double start_timestamp = 3;
inline bool KickedBall::has_start_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KickedBall::set_has_start_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KickedBall::clear_has_start_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KickedBall::clear_start_timestamp() {
  start_timestamp_ = 0;
  clear_has_start_timestamp();
}
inline double KickedBall::start_timestamp() const {
  // @@protoc_insertion_point(field_get:KickedBall.start_timestamp)
  return start_timestamp_;
}
inline void KickedBall::set_start_timestamp(double value) {
  set_has_start_timestamp();
  start_timestamp_ = value;
  // @@protoc_insertion_point(field_set:KickedBall.start_timestamp)
}

// optional double stop_timestamp = 4;
inline bool KickedBall::has_stop_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KickedBall::set_has_stop_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KickedBall::clear_has_stop_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KickedBall::clear_stop_timestamp() {
  stop_timestamp_ = 0;
  clear_has_stop_timestamp();
}
inline double KickedBall::stop_timestamp() const {
  // @@protoc_insertion_point(field_get:KickedBall.stop_timestamp)
  return stop_timestamp_;
}
inline void KickedBall::set_stop_timestamp(double value) {
  set_has_stop_timestamp();
  stop_timestamp_ = value;
  // @@protoc_insertion_point(field_set:KickedBall.stop_timestamp)
}

// optional .Vector2 stop_pos = 5;
inline bool KickedBall::has_stop_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KickedBall::set_has_stop_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KickedBall::clear_has_stop_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KickedBall::clear_stop_pos() {
  if (stop_pos_ != NULL) stop_pos_->::Vector2::Clear();
  clear_has_stop_pos();
}
inline const ::Vector2& KickedBall::stop_pos() const {
  // @@protoc_insertion_point(field_get:KickedBall.stop_pos)
  return stop_pos_ != NULL ? *stop_pos_ : *default_instance_->stop_pos_;
}
inline ::Vector2* KickedBall::mutable_stop_pos() {
  set_has_stop_pos();
  if (stop_pos_ == NULL) {
    stop_pos_ = new ::Vector2;
  }
  // @@protoc_insertion_point(field_mutable:KickedBall.stop_pos)
  return stop_pos_;
}
inline ::Vector2* KickedBall::release_stop_pos() {
  // @@protoc_insertion_point(field_release:KickedBall.stop_pos)
  clear_has_stop_pos();
  ::Vector2* temp = stop_pos_;
  stop_pos_ = NULL;
  return temp;
}
inline void KickedBall::set_allocated_stop_pos(::Vector2* stop_pos) {
  delete stop_pos_;
  stop_pos_ = stop_pos;
  if (stop_pos) {
    set_has_stop_pos();
  } else {
    clear_has_stop_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:KickedBall.stop_pos)
}

// optional .RobotId robot_id = 6;
inline bool KickedBall::has_robot_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void KickedBall::set_has_robot_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void KickedBall::clear_has_robot_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void KickedBall::clear_robot_id() {
  if (robot_id_ != NULL) robot_id_->::RobotId::Clear();
  clear_has_robot_id();
}
inline const ::RobotId& KickedBall::robot_id() const {
  // @@protoc_insertion_point(field_get:KickedBall.robot_id)
  return robot_id_ != NULL ? *robot_id_ : *default_instance_->robot_id_;
}
inline ::RobotId* KickedBall::mutable_robot_id() {
  set_has_robot_id();
  if (robot_id_ == NULL) {
    robot_id_ = new ::RobotId;
  }
  // @@protoc_insertion_point(field_mutable:KickedBall.robot_id)
  return robot_id_;
}
inline ::RobotId* KickedBall::release_robot_id() {
  // @@protoc_insertion_point(field_release:KickedBall.robot_id)
  clear_has_robot_id();
  ::RobotId* temp = robot_id_;
  robot_id_ = NULL;
  return temp;
}
inline void KickedBall::set_allocated_robot_id(::RobotId* robot_id) {
  delete robot_id_;
  robot_id_ = robot_id;
  if (robot_id) {
    set_has_robot_id();
  } else {
    clear_has_robot_id();
  }
  // @@protoc_insertion_point(field_set_allocated:KickedBall.robot_id)
}

// -------------------------------------------------------------------

// TrackedRobot

// required .RobotId robot_id = 1;
inline bool TrackedRobot::has_robot_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackedRobot::set_has_robot_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrackedRobot::clear_has_robot_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrackedRobot::clear_robot_id() {
  if (robot_id_ != NULL) robot_id_->::RobotId::Clear();
  clear_has_robot_id();
}
inline const ::RobotId& TrackedRobot::robot_id() const {
  // @@protoc_insertion_point(field_get:TrackedRobot.robot_id)
  return robot_id_ != NULL ? *robot_id_ : *default_instance_->robot_id_;
}
inline ::RobotId* TrackedRobot::mutable_robot_id() {
  set_has_robot_id();
  if (robot_id_ == NULL) {
    robot_id_ = new ::RobotId;
  }
  // @@protoc_insertion_point(field_mutable:TrackedRobot.robot_id)
  return robot_id_;
}
inline ::RobotId* TrackedRobot::release_robot_id() {
  // @@protoc_insertion_point(field_release:TrackedRobot.robot_id)
  clear_has_robot_id();
  ::RobotId* temp = robot_id_;
  robot_id_ = NULL;
  return temp;
}
inline void TrackedRobot::set_allocated_robot_id(::RobotId* robot_id) {
  delete robot_id_;
  robot_id_ = robot_id;
  if (robot_id) {
    set_has_robot_id();
  } else {
    clear_has_robot_id();
  }
  // @@protoc_insertion_point(field_set_allocated:TrackedRobot.robot_id)
}

// required .Vector2 pos = 2;
inline bool TrackedRobot::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackedRobot::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrackedRobot::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrackedRobot::clear_pos() {
  if (pos_ != NULL) pos_->::Vector2::Clear();
  clear_has_pos();
}
inline const ::Vector2& TrackedRobot::pos() const {
  // @@protoc_insertion_point(field_get:TrackedRobot.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Vector2* TrackedRobot::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::Vector2;
  }
  // @@protoc_insertion_point(field_mutable:TrackedRobot.pos)
  return pos_;
}
inline ::Vector2* TrackedRobot::release_pos() {
  // @@protoc_insertion_point(field_release:TrackedRobot.pos)
  clear_has_pos();
  ::Vector2* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void TrackedRobot::set_allocated_pos(::Vector2* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:TrackedRobot.pos)
}

// required float orientation = 3;
inline bool TrackedRobot::has_orientation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrackedRobot::set_has_orientation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrackedRobot::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrackedRobot::clear_orientation() {
  orientation_ = 0;
  clear_has_orientation();
}
inline float TrackedRobot::orientation() const {
  // @@protoc_insertion_point(field_get:TrackedRobot.orientation)
  return orientation_;
}
inline void TrackedRobot::set_orientation(float value) {
  set_has_orientation();
  orientation_ = value;
  // @@protoc_insertion_point(field_set:TrackedRobot.orientation)
}

// optional .Vector2 vel = 4;
inline bool TrackedRobot::has_vel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrackedRobot::set_has_vel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrackedRobot::clear_has_vel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrackedRobot::clear_vel() {
  if (vel_ != NULL) vel_->::Vector2::Clear();
  clear_has_vel();
}
inline const ::Vector2& TrackedRobot::vel() const {
  // @@protoc_insertion_point(field_get:TrackedRobot.vel)
  return vel_ != NULL ? *vel_ : *default_instance_->vel_;
}
inline ::Vector2* TrackedRobot::mutable_vel() {
  set_has_vel();
  if (vel_ == NULL) {
    vel_ = new ::Vector2;
  }
  // @@protoc_insertion_point(field_mutable:TrackedRobot.vel)
  return vel_;
}
inline ::Vector2* TrackedRobot::release_vel() {
  // @@protoc_insertion_point(field_release:TrackedRobot.vel)
  clear_has_vel();
  ::Vector2* temp = vel_;
  vel_ = NULL;
  return temp;
}
inline void TrackedRobot::set_allocated_vel(::Vector2* vel) {
  delete vel_;
  vel_ = vel;
  if (vel) {
    set_has_vel();
  } else {
    clear_has_vel();
  }
  // @@protoc_insertion_point(field_set_allocated:TrackedRobot.vel)
}

// optional float vel_angular = 5;
inline bool TrackedRobot::has_vel_angular() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrackedRobot::set_has_vel_angular() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrackedRobot::clear_has_vel_angular() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrackedRobot::clear_vel_angular() {
  vel_angular_ = 0;
  clear_has_vel_angular();
}
inline float TrackedRobot::vel_angular() const {
  // @@protoc_insertion_point(field_get:TrackedRobot.vel_angular)
  return vel_angular_;
}
inline void TrackedRobot::set_vel_angular(float value) {
  set_has_vel_angular();
  vel_angular_ = value;
  // @@protoc_insertion_point(field_set:TrackedRobot.vel_angular)
}

// optional float visibility = 6;
inline bool TrackedRobot::has_visibility() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrackedRobot::set_has_visibility() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrackedRobot::clear_has_visibility() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrackedRobot::clear_visibility() {
  visibility_ = 0;
  clear_has_visibility();
}
inline float TrackedRobot::visibility() const {
  // @@protoc_insertion_point(field_get:TrackedRobot.visibility)
  return visibility_;
}
inline void TrackedRobot::set_visibility(float value) {
  set_has_visibility();
  visibility_ = value;
  // @@protoc_insertion_point(field_set:TrackedRobot.visibility)
}

// -------------------------------------------------------------------

// TrackedFrame

// required uint32 frame_number = 1;
inline bool TrackedFrame::has_frame_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackedFrame::set_has_frame_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrackedFrame::clear_has_frame_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrackedFrame::clear_frame_number() {
  frame_number_ = 0u;
  clear_has_frame_number();
}
inline ::google::protobuf::uint32 TrackedFrame::frame_number() const {
  // @@protoc_insertion_point(field_get:TrackedFrame.frame_number)
  return frame_number_;
}
inline void TrackedFrame::set_frame_number(::google::protobuf::uint32 value) {
  set_has_frame_number();
  frame_number_ = value;
  // @@protoc_insertion_point(field_set:TrackedFrame.frame_number)
}

// required double timestamp = 2;
inline bool TrackedFrame::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackedFrame::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrackedFrame::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrackedFrame::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double TrackedFrame::timestamp() const {
  // @@protoc_insertion_point(field_get:TrackedFrame.timestamp)
  return timestamp_;
}
inline void TrackedFrame::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:TrackedFrame.timestamp)
}

// repeated .TrackedBall balls = 3;
inline int TrackedFrame::balls_size() const {
  return balls_.size();
}
inline void TrackedFrame::clear_balls() {
  balls_.Clear();
}
inline const ::TrackedBall& TrackedFrame::balls(int index) const {
  // @@protoc_insertion_point(field_get:TrackedFrame.balls)
  return balls_.Get(index);
}
inline ::TrackedBall* TrackedFrame::mutable_balls(int index) {
  // @@protoc_insertion_point(field_mutable:TrackedFrame.balls)
  return balls_.Mutable(index);
}
inline ::TrackedBall* TrackedFrame::add_balls() {
  // @@protoc_insertion_point(field_add:TrackedFrame.balls)
  return balls_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::TrackedBall >*
TrackedFrame::mutable_balls() {
  // @@protoc_insertion_point(field_mutable_list:TrackedFrame.balls)
  return &balls_;
}
inline const ::google::protobuf::RepeatedPtrField< ::TrackedBall >&
TrackedFrame::balls() const {
  // @@protoc_insertion_point(field_list:TrackedFrame.balls)
  return balls_;
}

// repeated .TrackedRobot robots = 4;
inline int TrackedFrame::robots_size() const {
  return robots_.size();
}
inline void TrackedFrame::clear_robots() {
  robots_.Clear();
}
inline const ::TrackedRobot& TrackedFrame::robots(int index) const {
  // @@protoc_insertion_point(field_get:TrackedFrame.robots)
  return robots_.Get(index);
}
inline ::TrackedRobot* TrackedFrame::mutable_robots(int index) {
  // @@protoc_insertion_point(field_mutable:TrackedFrame.robots)
  return robots_.Mutable(index);
}
inline ::TrackedRobot* TrackedFrame::add_robots() {
  // @@protoc_insertion_point(field_add:TrackedFrame.robots)
  return robots_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::TrackedRobot >*
TrackedFrame::mutable_robots() {
  // @@protoc_insertion_point(field_mutable_list:TrackedFrame.robots)
  return &robots_;
}
inline const ::google::protobuf::RepeatedPtrField< ::TrackedRobot >&
TrackedFrame::robots() const {
  // @@protoc_insertion_point(field_list:TrackedFrame.robots)
  return robots_;
}

// optional .KickedBall kicked_ball = 5;
inline bool TrackedFrame::has_kicked_ball() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrackedFrame::set_has_kicked_ball() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrackedFrame::clear_has_kicked_ball() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrackedFrame::clear_kicked_ball() {
  if (kicked_ball_ != NULL) kicked_ball_->::KickedBall::Clear();
  clear_has_kicked_ball();
}
inline const ::KickedBall& TrackedFrame::kicked_ball() const {
  // @@protoc_insertion_point(field_get:TrackedFrame.kicked_ball)
  return kicked_ball_ != NULL ? *kicked_ball_ : *default_instance_->kicked_ball_;
}
inline ::KickedBall* TrackedFrame::mutable_kicked_ball() {
  set_has_kicked_ball();
  if (kicked_ball_ == NULL) {
    kicked_ball_ = new ::KickedBall;
  }
  // @@protoc_insertion_point(field_mutable:TrackedFrame.kicked_ball)
  return kicked_ball_;
}
inline ::KickedBall* TrackedFrame::release_kicked_ball() {
  // @@protoc_insertion_point(field_release:TrackedFrame.kicked_ball)
  clear_has_kicked_ball();
  ::KickedBall* temp = kicked_ball_;
  kicked_ball_ = NULL;
  return temp;
}
inline void TrackedFrame::set_allocated_kicked_ball(::KickedBall* kicked_ball) {
  delete kicked_ball_;
  kicked_ball_ = kicked_ball;
  if (kicked_ball) {
    set_has_kicked_ball();
  } else {
    clear_has_kicked_ball();
  }
  // @@protoc_insertion_point(field_set_allocated:TrackedFrame.kicked_ball)
}

// repeated .Capability capabilities = 6;
inline int TrackedFrame::capabilities_size() const {
  return capabilities_.size();
}
inline void TrackedFrame::clear_capabilities() {
  capabilities_.Clear();
}
inline ::Capability TrackedFrame::capabilities(int index) const {
  // @@protoc_insertion_point(field_get:TrackedFrame.capabilities)
  return static_cast< ::Capability >(capabilities_.Get(index));
}
inline void TrackedFrame::set_capabilities(int index, ::Capability value) {
  assert(::Capability_IsValid(value));
  capabilities_.Set(index, value);
  // @@protoc_insertion_point(field_set:TrackedFrame.capabilities)
}
inline void TrackedFrame::add_capabilities(::Capability value) {
  assert(::Capability_IsValid(value));
  capabilities_.Add(value);
  // @@protoc_insertion_point(field_add:TrackedFrame.capabilities)
}
inline const ::google::protobuf::RepeatedField<int>&
TrackedFrame::capabilities() const {
  // @@protoc_insertion_point(field_list:TrackedFrame.capabilities)
  return capabilities_;
}
inline ::google::protobuf::RepeatedField<int>*
TrackedFrame::mutable_capabilities() {
  // @@protoc_insertion_point(field_mutable_list:TrackedFrame.capabilities)
  return &capabilities_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::TeamColor> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamColor>() {
  return ::TeamColor_descriptor();
}
template <> struct is_proto_enum< ::Capability> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Capability>() {
  return ::Capability_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_5frobocup_5fssl_5fdetection_5ftracked_2eproto__INCLUDED
