// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grSim_Commands.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "libs/grsim/include/messages/grSim_Commands.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* grSim_Robot_Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  grSim_Robot_Command_reflection_ = NULL;
const ::google::protobuf::Descriptor* grSim_Commands_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  grSim_Commands_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_grSim_5fCommands_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_grSim_5fCommands_2eproto() {
  protobuf_AddDesc_grSim_5fCommands_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "grSim_Commands.proto");
  GOOGLE_CHECK(file != NULL);
  grSim_Robot_Command_descriptor_ = file->message_type(0);
  static const int grSim_Robot_Command_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grSim_Robot_Command, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grSim_Robot_Command, kickspeedx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grSim_Robot_Command, kickspeedz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grSim_Robot_Command, veltangent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grSim_Robot_Command, velnormal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grSim_Robot_Command, velangular_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grSim_Robot_Command, spinner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grSim_Robot_Command, wheelsspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grSim_Robot_Command, wheel1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grSim_Robot_Command, wheel2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grSim_Robot_Command, wheel3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grSim_Robot_Command, wheel4_),
  };
  grSim_Robot_Command_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      grSim_Robot_Command_descriptor_,
      grSim_Robot_Command::default_instance_,
      grSim_Robot_Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grSim_Robot_Command, _has_bits_[0]),
      -1,
      -1,
      sizeof(grSim_Robot_Command),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grSim_Robot_Command, _internal_metadata_),
      -1);
  grSim_Commands_descriptor_ = file->message_type(1);
  static const int grSim_Commands_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grSim_Commands, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grSim_Commands, isteamyellow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grSim_Commands, robot_commands_),
  };
  grSim_Commands_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      grSim_Commands_descriptor_,
      grSim_Commands::default_instance_,
      grSim_Commands_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grSim_Commands, _has_bits_[0]),
      -1,
      -1,
      sizeof(grSim_Commands),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(grSim_Commands, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_grSim_5fCommands_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      grSim_Robot_Command_descriptor_, &grSim_Robot_Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      grSim_Commands_descriptor_, &grSim_Commands::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_grSim_5fCommands_2eproto() {
  delete grSim_Robot_Command::default_instance_;
  delete grSim_Robot_Command_reflection_;
  delete grSim_Commands::default_instance_;
  delete grSim_Commands_reflection_;
}

void protobuf_AddDesc_grSim_5fCommands_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_grSim_5fCommands_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024grSim_Commands.proto\"\352\001\n\023grSim_Robot_C"
    "ommand\022\n\n\002id\030\001 \002(\r\022\022\n\nkickspeedx\030\002 \002(\002\022\022"
    "\n\nkickspeedz\030\003 \002(\002\022\022\n\nveltangent\030\004 \002(\002\022\021"
    "\n\tvelnormal\030\005 \002(\002\022\022\n\nvelangular\030\006 \002(\002\022\017\n"
    "\007spinner\030\007 \002(\010\022\023\n\013wheelsspeed\030\010 \002(\010\022\016\n\006w"
    "heel1\030\t \001(\002\022\016\n\006wheel2\030\n \001(\002\022\016\n\006wheel3\030\013 "
    "\001(\002\022\016\n\006wheel4\030\014 \001(\002\"g\n\016grSim_Commands\022\021\n"
    "\ttimestamp\030\001 \002(\001\022\024\n\014isteamyellow\030\002 \002(\010\022,"
    "\n\016robot_commands\030\003 \003(\0132\024.grSim_Robot_Com"
    "mand", 364);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "grSim_Commands.proto", &protobuf_RegisterTypes);
  grSim_Robot_Command::default_instance_ = new grSim_Robot_Command();
  grSim_Commands::default_instance_ = new grSim_Commands();
  grSim_Robot_Command::default_instance_->InitAsDefaultInstance();
  grSim_Commands::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_grSim_5fCommands_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_grSim_5fCommands_2eproto {
  StaticDescriptorInitializer_grSim_5fCommands_2eproto() {
    protobuf_AddDesc_grSim_5fCommands_2eproto();
  }
} static_descriptor_initializer_grSim_5fCommands_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int grSim_Robot_Command::kIdFieldNumber;
const int grSim_Robot_Command::kKickspeedxFieldNumber;
const int grSim_Robot_Command::kKickspeedzFieldNumber;
const int grSim_Robot_Command::kVeltangentFieldNumber;
const int grSim_Robot_Command::kVelnormalFieldNumber;
const int grSim_Robot_Command::kVelangularFieldNumber;
const int grSim_Robot_Command::kSpinnerFieldNumber;
const int grSim_Robot_Command::kWheelsspeedFieldNumber;
const int grSim_Robot_Command::kWheel1FieldNumber;
const int grSim_Robot_Command::kWheel2FieldNumber;
const int grSim_Robot_Command::kWheel3FieldNumber;
const int grSim_Robot_Command::kWheel4FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

grSim_Robot_Command::grSim_Robot_Command()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grSim_Robot_Command)
}

void grSim_Robot_Command::InitAsDefaultInstance() {
}

grSim_Robot_Command::grSim_Robot_Command(const grSim_Robot_Command& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grSim_Robot_Command)
}

void grSim_Robot_Command::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  kickspeedx_ = 0;
  kickspeedz_ = 0;
  veltangent_ = 0;
  velnormal_ = 0;
  velangular_ = 0;
  spinner_ = false;
  wheelsspeed_ = false;
  wheel1_ = 0;
  wheel2_ = 0;
  wheel3_ = 0;
  wheel4_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

grSim_Robot_Command::~grSim_Robot_Command() {
  // @@protoc_insertion_point(destructor:grSim_Robot_Command)
  SharedDtor();
}

void grSim_Robot_Command::SharedDtor() {
  if (this != default_instance_) {
  }
}

void grSim_Robot_Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* grSim_Robot_Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return grSim_Robot_Command_descriptor_;
}

const grSim_Robot_Command& grSim_Robot_Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_grSim_5fCommands_2eproto();
  return *default_instance_;
}

grSim_Robot_Command* grSim_Robot_Command::default_instance_ = NULL;

grSim_Robot_Command* grSim_Robot_Command::New(::google::protobuf::Arena* arena) const {
  grSim_Robot_Command* n = new grSim_Robot_Command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void grSim_Robot_Command::Clear() {
// @@protoc_insertion_point(message_clear_start:grSim_Robot_Command)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(grSim_Robot_Command, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<grSim_Robot_Command*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(id_, wheelsspeed_);
  }
  ZR_(wheel1_, wheel4_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool grSim_Robot_Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grSim_Robot_Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_kickspeedx;
        break;
      }

      // required float kickspeedx = 2;
      case 2: {
        if (tag == 21) {
         parse_kickspeedx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kickspeedx_)));
          set_has_kickspeedx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_kickspeedz;
        break;
      }

      // required float kickspeedz = 3;
      case 3: {
        if (tag == 29) {
         parse_kickspeedz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kickspeedz_)));
          set_has_kickspeedz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_veltangent;
        break;
      }

      // required float veltangent = 4;
      case 4: {
        if (tag == 37) {
         parse_veltangent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &veltangent_)));
          set_has_veltangent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_velnormal;
        break;
      }

      // required float velnormal = 5;
      case 5: {
        if (tag == 45) {
         parse_velnormal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velnormal_)));
          set_has_velnormal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_velangular;
        break;
      }

      // required float velangular = 6;
      case 6: {
        if (tag == 53) {
         parse_velangular:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velangular_)));
          set_has_velangular();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_spinner;
        break;
      }

      // required bool spinner = 7;
      case 7: {
        if (tag == 56) {
         parse_spinner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &spinner_)));
          set_has_spinner();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_wheelsspeed;
        break;
      }

      // required bool wheelsspeed = 8;
      case 8: {
        if (tag == 64) {
         parse_wheelsspeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wheelsspeed_)));
          set_has_wheelsspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_wheel1;
        break;
      }

      // optional float wheel1 = 9;
      case 9: {
        if (tag == 77) {
         parse_wheel1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel1_)));
          set_has_wheel1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_wheel2;
        break;
      }

      // optional float wheel2 = 10;
      case 10: {
        if (tag == 85) {
         parse_wheel2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel2_)));
          set_has_wheel2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_wheel3;
        break;
      }

      // optional float wheel3 = 11;
      case 11: {
        if (tag == 93) {
         parse_wheel3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel3_)));
          set_has_wheel3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_wheel4;
        break;
      }

      // optional float wheel4 = 12;
      case 12: {
        if (tag == 101) {
         parse_wheel4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel4_)));
          set_has_wheel4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grSim_Robot_Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grSim_Robot_Command)
  return false;
#undef DO_
}

void grSim_Robot_Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grSim_Robot_Command)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required float kickspeedx = 2;
  if (has_kickspeedx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->kickspeedx(), output);
  }

  // required float kickspeedz = 3;
  if (has_kickspeedz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->kickspeedz(), output);
  }

  // required float veltangent = 4;
  if (has_veltangent()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->veltangent(), output);
  }

  // required float velnormal = 5;
  if (has_velnormal()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->velnormal(), output);
  }

  // required float velangular = 6;
  if (has_velangular()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->velangular(), output);
  }

  // required bool spinner = 7;
  if (has_spinner()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->spinner(), output);
  }

  // required bool wheelsspeed = 8;
  if (has_wheelsspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->wheelsspeed(), output);
  }

  // optional float wheel1 = 9;
  if (has_wheel1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->wheel1(), output);
  }

  // optional float wheel2 = 10;
  if (has_wheel2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->wheel2(), output);
  }

  // optional float wheel3 = 11;
  if (has_wheel3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->wheel3(), output);
  }

  // optional float wheel4 = 12;
  if (has_wheel4()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->wheel4(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:grSim_Robot_Command)
}

::google::protobuf::uint8* grSim_Robot_Command::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grSim_Robot_Command)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required float kickspeedx = 2;
  if (has_kickspeedx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->kickspeedx(), target);
  }

  // required float kickspeedz = 3;
  if (has_kickspeedz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->kickspeedz(), target);
  }

  // required float veltangent = 4;
  if (has_veltangent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->veltangent(), target);
  }

  // required float velnormal = 5;
  if (has_velnormal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->velnormal(), target);
  }

  // required float velangular = 6;
  if (has_velangular()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->velangular(), target);
  }

  // required bool spinner = 7;
  if (has_spinner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->spinner(), target);
  }

  // required bool wheelsspeed = 8;
  if (has_wheelsspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->wheelsspeed(), target);
  }

  // optional float wheel1 = 9;
  if (has_wheel1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->wheel1(), target);
  }

  // optional float wheel2 = 10;
  if (has_wheel2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->wheel2(), target);
  }

  // optional float wheel3 = 11;
  if (has_wheel3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->wheel3(), target);
  }

  // optional float wheel4 = 12;
  if (has_wheel4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->wheel4(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grSim_Robot_Command)
  return target;
}

int grSim_Robot_Command::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:grSim_Robot_Command)
  int total_size = 0;

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_kickspeedx()) {
    // required float kickspeedx = 2;
    total_size += 1 + 4;
  }

  if (has_kickspeedz()) {
    // required float kickspeedz = 3;
    total_size += 1 + 4;
  }

  if (has_veltangent()) {
    // required float veltangent = 4;
    total_size += 1 + 4;
  }

  if (has_velnormal()) {
    // required float velnormal = 5;
    total_size += 1 + 4;
  }

  if (has_velangular()) {
    // required float velangular = 6;
    total_size += 1 + 4;
  }

  if (has_spinner()) {
    // required bool spinner = 7;
    total_size += 1 + 1;
  }

  if (has_wheelsspeed()) {
    // required bool wheelsspeed = 8;
    total_size += 1 + 1;
  }

  return total_size;
}
int grSim_Robot_Command::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:grSim_Robot_Command)
  int total_size = 0;

  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required float kickspeedx = 2;
    total_size += 1 + 4;

    // required float kickspeedz = 3;
    total_size += 1 + 4;

    // required float veltangent = 4;
    total_size += 1 + 4;

    // required float velnormal = 5;
    total_size += 1 + 4;

    // required float velangular = 6;
    total_size += 1 + 4;

    // required bool spinner = 7;
    total_size += 1 + 1;

    // required bool wheelsspeed = 8;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional float wheel1 = 9;
    if (has_wheel1()) {
      total_size += 1 + 4;
    }

    // optional float wheel2 = 10;
    if (has_wheel2()) {
      total_size += 1 + 4;
    }

    // optional float wheel3 = 11;
    if (has_wheel3()) {
      total_size += 1 + 4;
    }

    // optional float wheel4 = 12;
    if (has_wheel4()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void grSim_Robot_Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grSim_Robot_Command)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const grSim_Robot_Command* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const grSim_Robot_Command>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grSim_Robot_Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grSim_Robot_Command)
    MergeFrom(*source);
  }
}

void grSim_Robot_Command::MergeFrom(const grSim_Robot_Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grSim_Robot_Command)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_kickspeedx()) {
      set_kickspeedx(from.kickspeedx());
    }
    if (from.has_kickspeedz()) {
      set_kickspeedz(from.kickspeedz());
    }
    if (from.has_veltangent()) {
      set_veltangent(from.veltangent());
    }
    if (from.has_velnormal()) {
      set_velnormal(from.velnormal());
    }
    if (from.has_velangular()) {
      set_velangular(from.velangular());
    }
    if (from.has_spinner()) {
      set_spinner(from.spinner());
    }
    if (from.has_wheelsspeed()) {
      set_wheelsspeed(from.wheelsspeed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wheel1()) {
      set_wheel1(from.wheel1());
    }
    if (from.has_wheel2()) {
      set_wheel2(from.wheel2());
    }
    if (from.has_wheel3()) {
      set_wheel3(from.wheel3());
    }
    if (from.has_wheel4()) {
      set_wheel4(from.wheel4());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void grSim_Robot_Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grSim_Robot_Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void grSim_Robot_Command::CopyFrom(const grSim_Robot_Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grSim_Robot_Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool grSim_Robot_Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void grSim_Robot_Command::Swap(grSim_Robot_Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void grSim_Robot_Command::InternalSwap(grSim_Robot_Command* other) {
  std::swap(id_, other->id_);
  std::swap(kickspeedx_, other->kickspeedx_);
  std::swap(kickspeedz_, other->kickspeedz_);
  std::swap(veltangent_, other->veltangent_);
  std::swap(velnormal_, other->velnormal_);
  std::swap(velangular_, other->velangular_);
  std::swap(spinner_, other->spinner_);
  std::swap(wheelsspeed_, other->wheelsspeed_);
  std::swap(wheel1_, other->wheel1_);
  std::swap(wheel2_, other->wheel2_);
  std::swap(wheel3_, other->wheel3_);
  std::swap(wheel4_, other->wheel4_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata grSim_Robot_Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = grSim_Robot_Command_descriptor_;
  metadata.reflection = grSim_Robot_Command_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// grSim_Robot_Command

// required uint32 id = 1;
bool grSim_Robot_Command::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void grSim_Robot_Command::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void grSim_Robot_Command::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void grSim_Robot_Command::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 grSim_Robot_Command::id() const {
  // @@protoc_insertion_point(field_get:grSim_Robot_Command.id)
  return id_;
}
 void grSim_Robot_Command::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:grSim_Robot_Command.id)
}

// required float kickspeedx = 2;
bool grSim_Robot_Command::has_kickspeedx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void grSim_Robot_Command::set_has_kickspeedx() {
  _has_bits_[0] |= 0x00000002u;
}
void grSim_Robot_Command::clear_has_kickspeedx() {
  _has_bits_[0] &= ~0x00000002u;
}
void grSim_Robot_Command::clear_kickspeedx() {
  kickspeedx_ = 0;
  clear_has_kickspeedx();
}
 float grSim_Robot_Command::kickspeedx() const {
  // @@protoc_insertion_point(field_get:grSim_Robot_Command.kickspeedx)
  return kickspeedx_;
}
 void grSim_Robot_Command::set_kickspeedx(float value) {
  set_has_kickspeedx();
  kickspeedx_ = value;
  // @@protoc_insertion_point(field_set:grSim_Robot_Command.kickspeedx)
}

// required float kickspeedz = 3;
bool grSim_Robot_Command::has_kickspeedz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void grSim_Robot_Command::set_has_kickspeedz() {
  _has_bits_[0] |= 0x00000004u;
}
void grSim_Robot_Command::clear_has_kickspeedz() {
  _has_bits_[0] &= ~0x00000004u;
}
void grSim_Robot_Command::clear_kickspeedz() {
  kickspeedz_ = 0;
  clear_has_kickspeedz();
}
 float grSim_Robot_Command::kickspeedz() const {
  // @@protoc_insertion_point(field_get:grSim_Robot_Command.kickspeedz)
  return kickspeedz_;
}
 void grSim_Robot_Command::set_kickspeedz(float value) {
  set_has_kickspeedz();
  kickspeedz_ = value;
  // @@protoc_insertion_point(field_set:grSim_Robot_Command.kickspeedz)
}

// required float veltangent = 4;
bool grSim_Robot_Command::has_veltangent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void grSim_Robot_Command::set_has_veltangent() {
  _has_bits_[0] |= 0x00000008u;
}
void grSim_Robot_Command::clear_has_veltangent() {
  _has_bits_[0] &= ~0x00000008u;
}
void grSim_Robot_Command::clear_veltangent() {
  veltangent_ = 0;
  clear_has_veltangent();
}
 float grSim_Robot_Command::veltangent() const {
  // @@protoc_insertion_point(field_get:grSim_Robot_Command.veltangent)
  return veltangent_;
}
 void grSim_Robot_Command::set_veltangent(float value) {
  set_has_veltangent();
  veltangent_ = value;
  // @@protoc_insertion_point(field_set:grSim_Robot_Command.veltangent)
}

// required float velnormal = 5;
bool grSim_Robot_Command::has_velnormal() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void grSim_Robot_Command::set_has_velnormal() {
  _has_bits_[0] |= 0x00000010u;
}
void grSim_Robot_Command::clear_has_velnormal() {
  _has_bits_[0] &= ~0x00000010u;
}
void grSim_Robot_Command::clear_velnormal() {
  velnormal_ = 0;
  clear_has_velnormal();
}
 float grSim_Robot_Command::velnormal() const {
  // @@protoc_insertion_point(field_get:grSim_Robot_Command.velnormal)
  return velnormal_;
}
 void grSim_Robot_Command::set_velnormal(float value) {
  set_has_velnormal();
  velnormal_ = value;
  // @@protoc_insertion_point(field_set:grSim_Robot_Command.velnormal)
}

// required float velangular = 6;
bool grSim_Robot_Command::has_velangular() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void grSim_Robot_Command::set_has_velangular() {
  _has_bits_[0] |= 0x00000020u;
}
void grSim_Robot_Command::clear_has_velangular() {
  _has_bits_[0] &= ~0x00000020u;
}
void grSim_Robot_Command::clear_velangular() {
  velangular_ = 0;
  clear_has_velangular();
}
 float grSim_Robot_Command::velangular() const {
  // @@protoc_insertion_point(field_get:grSim_Robot_Command.velangular)
  return velangular_;
}
 void grSim_Robot_Command::set_velangular(float value) {
  set_has_velangular();
  velangular_ = value;
  // @@protoc_insertion_point(field_set:grSim_Robot_Command.velangular)
}

// required bool spinner = 7;
bool grSim_Robot_Command::has_spinner() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void grSim_Robot_Command::set_has_spinner() {
  _has_bits_[0] |= 0x00000040u;
}
void grSim_Robot_Command::clear_has_spinner() {
  _has_bits_[0] &= ~0x00000040u;
}
void grSim_Robot_Command::clear_spinner() {
  spinner_ = false;
  clear_has_spinner();
}
 bool grSim_Robot_Command::spinner() const {
  // @@protoc_insertion_point(field_get:grSim_Robot_Command.spinner)
  return spinner_;
}
 void grSim_Robot_Command::set_spinner(bool value) {
  set_has_spinner();
  spinner_ = value;
  // @@protoc_insertion_point(field_set:grSim_Robot_Command.spinner)
}

// required bool wheelsspeed = 8;
bool grSim_Robot_Command::has_wheelsspeed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void grSim_Robot_Command::set_has_wheelsspeed() {
  _has_bits_[0] |= 0x00000080u;
}
void grSim_Robot_Command::clear_has_wheelsspeed() {
  _has_bits_[0] &= ~0x00000080u;
}
void grSim_Robot_Command::clear_wheelsspeed() {
  wheelsspeed_ = false;
  clear_has_wheelsspeed();
}
 bool grSim_Robot_Command::wheelsspeed() const {
  // @@protoc_insertion_point(field_get:grSim_Robot_Command.wheelsspeed)
  return wheelsspeed_;
}
 void grSim_Robot_Command::set_wheelsspeed(bool value) {
  set_has_wheelsspeed();
  wheelsspeed_ = value;
  // @@protoc_insertion_point(field_set:grSim_Robot_Command.wheelsspeed)
}

// optional float wheel1 = 9;
bool grSim_Robot_Command::has_wheel1() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void grSim_Robot_Command::set_has_wheel1() {
  _has_bits_[0] |= 0x00000100u;
}
void grSim_Robot_Command::clear_has_wheel1() {
  _has_bits_[0] &= ~0x00000100u;
}
void grSim_Robot_Command::clear_wheel1() {
  wheel1_ = 0;
  clear_has_wheel1();
}
 float grSim_Robot_Command::wheel1() const {
  // @@protoc_insertion_point(field_get:grSim_Robot_Command.wheel1)
  return wheel1_;
}
 void grSim_Robot_Command::set_wheel1(float value) {
  set_has_wheel1();
  wheel1_ = value;
  // @@protoc_insertion_point(field_set:grSim_Robot_Command.wheel1)
}

// optional float wheel2 = 10;
bool grSim_Robot_Command::has_wheel2() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void grSim_Robot_Command::set_has_wheel2() {
  _has_bits_[0] |= 0x00000200u;
}
void grSim_Robot_Command::clear_has_wheel2() {
  _has_bits_[0] &= ~0x00000200u;
}
void grSim_Robot_Command::clear_wheel2() {
  wheel2_ = 0;
  clear_has_wheel2();
}
 float grSim_Robot_Command::wheel2() const {
  // @@protoc_insertion_point(field_get:grSim_Robot_Command.wheel2)
  return wheel2_;
}
 void grSim_Robot_Command::set_wheel2(float value) {
  set_has_wheel2();
  wheel2_ = value;
  // @@protoc_insertion_point(field_set:grSim_Robot_Command.wheel2)
}

// optional float wheel3 = 11;
bool grSim_Robot_Command::has_wheel3() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void grSim_Robot_Command::set_has_wheel3() {
  _has_bits_[0] |= 0x00000400u;
}
void grSim_Robot_Command::clear_has_wheel3() {
  _has_bits_[0] &= ~0x00000400u;
}
void grSim_Robot_Command::clear_wheel3() {
  wheel3_ = 0;
  clear_has_wheel3();
}
 float grSim_Robot_Command::wheel3() const {
  // @@protoc_insertion_point(field_get:grSim_Robot_Command.wheel3)
  return wheel3_;
}
 void grSim_Robot_Command::set_wheel3(float value) {
  set_has_wheel3();
  wheel3_ = value;
  // @@protoc_insertion_point(field_set:grSim_Robot_Command.wheel3)
}

// optional float wheel4 = 12;
bool grSim_Robot_Command::has_wheel4() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void grSim_Robot_Command::set_has_wheel4() {
  _has_bits_[0] |= 0x00000800u;
}
void grSim_Robot_Command::clear_has_wheel4() {
  _has_bits_[0] &= ~0x00000800u;
}
void grSim_Robot_Command::clear_wheel4() {
  wheel4_ = 0;
  clear_has_wheel4();
}
 float grSim_Robot_Command::wheel4() const {
  // @@protoc_insertion_point(field_get:grSim_Robot_Command.wheel4)
  return wheel4_;
}
 void grSim_Robot_Command::set_wheel4(float value) {
  set_has_wheel4();
  wheel4_ = value;
  // @@protoc_insertion_point(field_set:grSim_Robot_Command.wheel4)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int grSim_Commands::kTimestampFieldNumber;
const int grSim_Commands::kIsteamyellowFieldNumber;
const int grSim_Commands::kRobotCommandsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

grSim_Commands::grSim_Commands()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:grSim_Commands)
}

void grSim_Commands::InitAsDefaultInstance() {
}

grSim_Commands::grSim_Commands(const grSim_Commands& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:grSim_Commands)
}

void grSim_Commands::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0;
  isteamyellow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

grSim_Commands::~grSim_Commands() {
  // @@protoc_insertion_point(destructor:grSim_Commands)
  SharedDtor();
}

void grSim_Commands::SharedDtor() {
  if (this != default_instance_) {
  }
}

void grSim_Commands::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* grSim_Commands::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return grSim_Commands_descriptor_;
}

const grSim_Commands& grSim_Commands::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_grSim_5fCommands_2eproto();
  return *default_instance_;
}

grSim_Commands* grSim_Commands::default_instance_ = NULL;

grSim_Commands* grSim_Commands::New(::google::protobuf::Arena* arena) const {
  grSim_Commands* n = new grSim_Commands;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void grSim_Commands::Clear() {
// @@protoc_insertion_point(message_clear_start:grSim_Commands)
  if (_has_bits_[0 / 32] & 3u) {
    timestamp_ = 0;
    isteamyellow_ = false;
  }
  robot_commands_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool grSim_Commands::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:grSim_Commands)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double timestamp = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isteamyellow;
        break;
      }

      // required bool isteamyellow = 2;
      case 2: {
        if (tag == 16) {
         parse_isteamyellow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isteamyellow_)));
          set_has_isteamyellow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_robot_commands;
        break;
      }

      // repeated .grSim_Robot_Command robot_commands = 3;
      case 3: {
        if (tag == 26) {
         parse_robot_commands:
          DO_(input->IncrementRecursionDepth());
         parse_loop_robot_commands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_robot_commands()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_robot_commands;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:grSim_Commands)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:grSim_Commands)
  return false;
#undef DO_
}

void grSim_Commands::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:grSim_Commands)
  // required double timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // required bool isteamyellow = 2;
  if (has_isteamyellow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isteamyellow(), output);
  }

  // repeated .grSim_Robot_Command robot_commands = 3;
  for (unsigned int i = 0, n = this->robot_commands_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->robot_commands(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:grSim_Commands)
}

::google::protobuf::uint8* grSim_Commands::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:grSim_Commands)
  // required double timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // required bool isteamyellow = 2;
  if (has_isteamyellow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isteamyellow(), target);
  }

  // repeated .grSim_Robot_Command robot_commands = 3;
  for (unsigned int i = 0, n = this->robot_commands_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->robot_commands(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grSim_Commands)
  return target;
}

int grSim_Commands::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:grSim_Commands)
  int total_size = 0;

  if (has_timestamp()) {
    // required double timestamp = 1;
    total_size += 1 + 8;
  }

  if (has_isteamyellow()) {
    // required bool isteamyellow = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
int grSim_Commands::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:grSim_Commands)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double timestamp = 1;
    total_size += 1 + 8;

    // required bool isteamyellow = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .grSim_Robot_Command robot_commands = 3;
  total_size += 1 * this->robot_commands_size();
  for (int i = 0; i < this->robot_commands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->robot_commands(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void grSim_Commands::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:grSim_Commands)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const grSim_Commands* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const grSim_Commands>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:grSim_Commands)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:grSim_Commands)
    MergeFrom(*source);
  }
}

void grSim_Commands::MergeFrom(const grSim_Commands& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:grSim_Commands)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  robot_commands_.MergeFrom(from.robot_commands_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_isteamyellow()) {
      set_isteamyellow(from.isteamyellow());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void grSim_Commands::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:grSim_Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void grSim_Commands::CopyFrom(const grSim_Commands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grSim_Commands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool grSim_Commands::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->robot_commands())) return false;
  return true;
}

void grSim_Commands::Swap(grSim_Commands* other) {
  if (other == this) return;
  InternalSwap(other);
}
void grSim_Commands::InternalSwap(grSim_Commands* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(isteamyellow_, other->isteamyellow_);
  robot_commands_.UnsafeArenaSwap(&other->robot_commands_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata grSim_Commands::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = grSim_Commands_descriptor_;
  metadata.reflection = grSim_Commands_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// grSim_Commands

// required double timestamp = 1;
bool grSim_Commands::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void grSim_Commands::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void grSim_Commands::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void grSim_Commands::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
 double grSim_Commands::timestamp() const {
  // @@protoc_insertion_point(field_get:grSim_Commands.timestamp)
  return timestamp_;
}
 void grSim_Commands::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:grSim_Commands.timestamp)
}

// required bool isteamyellow = 2;
bool grSim_Commands::has_isteamyellow() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void grSim_Commands::set_has_isteamyellow() {
  _has_bits_[0] |= 0x00000002u;
}
void grSim_Commands::clear_has_isteamyellow() {
  _has_bits_[0] &= ~0x00000002u;
}
void grSim_Commands::clear_isteamyellow() {
  isteamyellow_ = false;
  clear_has_isteamyellow();
}
 bool grSim_Commands::isteamyellow() const {
  // @@protoc_insertion_point(field_get:grSim_Commands.isteamyellow)
  return isteamyellow_;
}
 void grSim_Commands::set_isteamyellow(bool value) {
  set_has_isteamyellow();
  isteamyellow_ = value;
  // @@protoc_insertion_point(field_set:grSim_Commands.isteamyellow)
}

// repeated .grSim_Robot_Command robot_commands = 3;
int grSim_Commands::robot_commands_size() const {
  return robot_commands_.size();
}
void grSim_Commands::clear_robot_commands() {
  robot_commands_.Clear();
}
const ::grSim_Robot_Command& grSim_Commands::robot_commands(int index) const {
  // @@protoc_insertion_point(field_get:grSim_Commands.robot_commands)
  return robot_commands_.Get(index);
}
::grSim_Robot_Command* grSim_Commands::mutable_robot_commands(int index) {
  // @@protoc_insertion_point(field_mutable:grSim_Commands.robot_commands)
  return robot_commands_.Mutable(index);
}
::grSim_Robot_Command* grSim_Commands::add_robot_commands() {
  // @@protoc_insertion_point(field_add:grSim_Commands.robot_commands)
  return robot_commands_.Add();
}
::google::protobuf::RepeatedPtrField< ::grSim_Robot_Command >*
grSim_Commands::mutable_robot_commands() {
  // @@protoc_insertion_point(field_mutable_list:grSim_Commands.robot_commands)
  return &robot_commands_;
}
const ::google::protobuf::RepeatedPtrField< ::grSim_Robot_Command >&
grSim_Commands::robot_commands() const {
  // @@protoc_insertion_point(field_list:grSim_Commands.robot_commands)
  return robot_commands_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
